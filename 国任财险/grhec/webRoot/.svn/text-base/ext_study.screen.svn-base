<?xml version="1.0" encoding="UTF-8"?>
<!--
    $Author: Mouse Chow  
    $Date: 2012-8-23 下午11:13:51  
    $Revision: 1.0  
    $Purpose: 
-->
<a:screen xmlns:a="http://www.aurora-framework.org/application">
    <a:view>
        <a:link/>
        <style><![CDATA[
			
				input{
				    width:150px;
				    height:40px;
				}
				
				*{
					font-size:12px;
					font-family:Consolas;    
				}
				
				#chartBox{
					width:146px;
					height:23px;    
					padding-top:2px;
					padding-left:2px;
					padding-bottom:2px;
					padding-right:2px;
					float:left;
				}
				
				#onlineBox{
					width:146px;
					height:23px;    
					line-height:23px;
					text-align:center;
				}
				
				#historyBox{
					width:146px;
					height:23px;    
					padding-top:2px;
					padding-left:2px;
					padding-bottom:2px;
					padding-right:2px;
					float:left;
				}
				
				#logBox{
					width:146px;
					height:23px;    
					line-height:23px;
					text-align:center;
				}
				
				#lastChartBox{
					width:146px;
					height:23px;    
					padding-top:2px;
					padding-left:2px;
					padding-bottom:2px;
					padding-right:2px;
					float:left;
				}
				
				#peopleListBox{
					width:146px;
					height:23px;    
					line-height:23px;
					text-align:center;
				}
				
				#peopleList{
				    width:146px; 
					line-height:23px;
					text-align:center;
					position:positive;
					bottom:-23px;
					display:none;
				}
				
				#peopleList li:nth-child(2n){
				    background-color:#95A865;
				}
				
				#peopleList li:nth-child(2n - 1){
				    background-color:#4E79B2;
				}
				
				.black_bcg{
				    background-color:black;
				}
				
				.red_bcg{
				    background-color:red;
				}
				
				.grey_bcg{
				    background-color:#cccccc;
				}
				
				.noneType{
				    
				}
			
		]]></style>
        <script><![CDATA[
            function initChart() {
                Ext.fly('historyBox').addClass('grey_bcg');
            
                Ext.fly('lastChartBox').on('mouseover', function(e, t) {
                    Ext.get('peopleList').setStyle('display', 'block');
                });
            
                Ext.fly('lastChartBox').on('mouseout', function(e, t) {
                    Ext.get('peopleList').setStyle('display', 'none');
                });
            }
            
            function clickFunction() {
                Ext.fly('chartBox').radioClass('grey_bcg');
                debugger;
                Ext.fly('chartBox').setOpacity(.2, {
                    duration: 2
                });
            
                Ext.fly('chartBox').setOpacity(.8, {
                    duration: 2
                });
            }
            
            function isFun() {
                /*
                 is
                 测试当前元素是否与传入的选择符相符一致。
                 var el = Ext.get('elId');
                 if (el.is('p.myCls')) {
                 // 条件成立
                 }
                 */
                var el = Ext.get('lastChartBox');
                alert(el.is('div.noneType'));
                var el2 = Ext.select('div.noneType');
            
            }
            
            function findParentFun() {
                /*
                 findParent
                 定位于此节点，以此节点为起点，向外围搜索外层的父节点，搜索条件必须符合并匹配传
                 入的简易选择符。
                 Ext.fly('elId').findParent('div'); // 返回dom节点
                 Ext.fly('elId').findParent('div', 4); // 查找4个节点
                 Ext.fly('elId').findParent('div', null, true); // 返回Ext.Element
                 当前节点也算作是父节点
                 */
                var parentEl = Ext.fly('peopleList').findParent('div', 8);
            }
            
            function findParentNodeFun() {
                /*
                 findParentNode
                 定位于此节点的“父节点”，以此节点的“父节点”为起点，向外围搜索外层的“父父”
                 节点，搜索条件必须符合并匹配传入的简易选择符。
                 Ext.fly('elId').findParentNode('div');
                 当前节点也算作是父节点
                 */
                var parentNode = Ext.fly('peopleList').findParentNode('div');
            }
            
            function upFun() {
                /*
                 up
                 沿着DOM，向外围搜索外层的“父父”节点，搜索条件必须符合并匹配传入的简易选择符。
                 Ext.fly('elId').up('div');
                 Ext.fly('elId').up('div', 5); // 限5层的内查找
                 */
                var upEl = Ext.fly('peopleList').up('div.noneType', 5);
            }
            
            function selectFun() {
                /*
                 select
                 传入一个CSS选择符的参数，然后依据该CSS选择符从当前元素下面，形成期待匹配子节
                 点的集合，也就是“选择”的操作，最后以一个 Ext.CompositeElement类型的组合元素的
                 形式返回。如果以Ext.select()调用表示从document可是搜索。
                 // 返回结果的CompositeElement
                 Ext.fly('elId').select('div:nth-child(2)');
                 // 返回数组
                 Ext.fly('elId').select('div:nth-child(2)',true);
                 // 整个document都会搜索
                 Ext.select('div:nth-child(2)');
                 */
                var els = Ext.select('div:nth-child(2n)');
            }
            
            function queryFun() {
                /*
                 query
                 进行一次query的查询，返回DOM 节点组成的数组。可选地第二参数设置为查询的起点，
                 如不指定则为 document。
                 // 返回dom节点组成的数组
                 Ext.query('div:nth-child(2)');
                 */
                var els = Ext.query('div:nth-child(2n)', Ext.fly('msgFrame').element);
            }
            
            function childFun() {
                /*
                 child
                 基于送入的选择符，不限定深度进行搜索，符合的话选取单个子节点。
                 Ext.fly('elId').child('p.highlight');  // 返回的类型是Ext.Element
                 Ext.fly('elId').child('p.highlight', true);  // 返回dom节点
                 */
                var els = Ext.fly('msgFrame').child('div:nth-child(2n)');
            }
            
            function downFun() {
                /*
                 down
                 基于该选择符，"直接"选取单个子节点。
                 Ext.fly('elId').down('span');  // 返回的类型是Ext.Element
                 Ext.fly('elId').down('span', true);  // 返回dom节点
                 */
                var downEl = Ext.fly('lastChartBox').down('span');
                var childEl = Ext.fly('lastChartBox').child('span');
            }
            
            function parentFun() {
                /*
                 parent
                 返回当前节点的那个父节点，可选地可送入一个期待的选择符。
                 // 返回父节点，类型是Ext.Element
                 Ext.fly('elId').parent();
                 // 返回父节点，类型是html dom
                 Ext.fly('elId').parent("", true);
                 // 返回父级节点，但一定要是div的，找到就返回，类型是Ext.Element
                 Ext.fly('elId').parent("div");
                 */
                var parentEl = Ext.fly('lastChartBox').parent('div');
            }
            
            function nextFun() {
                /*
                 next
                 获取下一个侧边节点，跳过文本节点。可选地可送入一个期待的选择符。
                 // 返回下一个侧边节点，类型是Ext.Element
                 Ext.fly('elId').next();
                 // 返回下一个侧边节点，类型是html dom
                 Ext.fly('elId').next("", true);
                 // 返回下一个侧边节点，但一定要是div的，找到就返回，类型是Ext.Element
                 Ext.fly('elId').next("div");
                 */
                var nextEl = Ext.fly('historyBox').next('div');
                var nextSpanEl = Ext.fly('historyBox').next('span');
            
            }
            
            
            function prevFun() {
                /*
                 prev
                 获取上一个侧边节点，跳过文本节点。可选地可送入一个期待的选择符。
                 // 返回上一个侧边节点，类型是Ext.Element
                 Ext.fly('elId').prev();
                 // 返回上一个侧边节点，类型是html dom
                 Ext.fly('elId').prev("", true);
                 // 返回上一个侧边节点，但一定要是div的，找到就返回，类型是Ext.Element
                 Ext.fly('elId').prev("div");
                 */
                var prevEl = Ext.fly('historyBox').prev('div');
                var prevSpanEl = Ext.fly('historyBox').prev('span');
            
            }
            
            function firstFun() {
                /*
                 first
                 获取第一个侧边节点，跳过文本节点。可选地可送入一个期待的选择符。
                 // 返回第一个侧边节点，类型是Ext.Element
                 Ext.fly('elId').first();
                 // 返回第一个侧边节点，类型是html dom
                 Ext.fly('elId').first("", true);
                 // 返回第一个侧边节点，但一定要是div的，找到就返回，类型是Ext.Element
                 Ext.fly('elId').first("div");
                 */
                var firstEl = Ext.fly('historyBox').first('div');
                var firstSpanEl = Ext.fly('historyBox').first('span');
            
            }
            
            function lastFun() {
                /*
                 last
                 获取最后一个侧边节点，跳过文本节点。可选地可送入一个期待的选择符。
                 // 返回最后一个侧边节点，类型是Ext.Element
                 Ext.fly('elId').last();
                 // 返回最后一个侧边节点，类型是html dom
                 Ext.fly('elId').last("", true);
                 // 返回最后一个侧边节点，但一定要是div的，找到就返回，类型是Ext.Element
                 Ext.fly('elId').last("div");
                 */
                var lastEl = Ext.fly('historyBox').last('div');
                var lastSpanEl = Ext.fly('historyBox').last('span');
            
            }
        ]]></script>
        <div id="msgFrame">
            <div id="chartBox">
                <div id="onlineBox"><![CDATA[
				在线人员
			]]></div>
            </div>
            <div id="historyBox">
                <div id="logBox"><![CDATA[
				聊天记录
			]]></div>
            </div>
            <div id="lastChartBox" class="noneType">
                <div id="peopleListBox">
                    <span><![CDATA[最近联系人]]></span>
                    <div id="peopleList">
                        <ul>
                            <li><![CDATA[郭璇]]></li>
                            <li><![CDATA[李凯鹏]]></li>
                            <li><![CDATA[李丹丹]]></li>
                            <li><![CDATA[李红新]]></li>
                            <li><![CDATA[缪少华]]></li>
                            <li><![CDATA[胡云波]]></li>
                            <li><![CDATA[郭雪兆]]></li>
                        </ul>
                    </div>
                </div>
                <div id="peopleListBox1"/>
                <div id="peopleListBox2"/>
                <div id="peopleListBox3"/>
            </div>
            <div style="clear:both"/>
            <p>
                <input onclick="javascript:clickFunction();" type="button" value="点击"/>
                <input onclick="javascript:isFun();" type="button" value="is 方法"/>
                <input onclick="javascript:findParentFun();" type="button" value="findParent 方法"/>
                <input onclick="javascript:findParentNodeFun();" type="button" value="findParentNode 方法"/>
                <input onclick="javascript:upFun();" type="button" value="up 方法"/>
                <input onclick="javascript:selectFun();" type="button" value="select 方法"/>
                <input onclick="javascript:queryFun();" type="button" value="query 方法"/>
            </p>
            <p>
                <input onclick="javascript:childFun();" type="button" value="child 方法"/>
                <input onclick="javascript:downFun();" type="button" value="down 方法"/>
                <input onclick="javascript:parentFun();" type="button" value="parent 方法"/>
                <input onclick="javascript:nextFun();" type="button" value="next 方法"/>
                <input onclick="javascript:prevFun();" type="button" value="prev 方法"/>
                <input onclick="javascript:firstFun();" type="button" value="first 方法"/>
                <input onclick="javascript:lastFun();" type="button" value="last 方法"/>
            </p>
        </div>
        <script><![CDATA[
			initChart();
		]]></script>
    </a:view>
</a:screen>
