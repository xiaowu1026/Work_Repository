<?xml version="1.0" encoding="UTF-8"?>
<a:screen xmlns:a="http://www.aurora-framework.org/application" trace="true">
    <!-- -->
    <a:init-procedure>
        <a:model-query defaultWhereClause="t1.hidden_flag = &apos;Y&apos; and (t1.user_id is null or t1.user_id = ${/session/@user_id}) and (t1.role_id is null or t1.role_id = ${/session/@role_id})" fetchAll="true" model="csh.CSH5010.csh_pay_req_hide_columns" rootpath="grid_cust"/>
        <a:model-query fetchAll="true" model="csh.CSH5010.csh_pay_req_update_init_record" rootpath="record"/>
        <!--<a:model-query defaultWhereClause="csh_transaction_type_code = &apos;PREPAYMENT&apos; and enabled_flag = &apos;Y&apos;" fetchAll="true" model="csh.csh_transaction_classes_vl" rootpath="trans_classes"/>-->
        <a:model-query fetchAll="true" model="csh.CSH5010.csh_pay_req_update_init_user" rootpath="user"/>
        <a:model-query fetchAll="true" model="csh.csh_pay_req_update_init_emp_list" rootpath="emp_list"/>
        <a:model-query defaultWhereClause="enabled_flag = &apos;Y&apos;" fetchAll="true" model="gld.gld_currency_vl" rootpath="cur_list"/>
        <a:model-query defaultWhereClause="enabled_flag = &apos;Y&apos;" fetchAll="true" model="csh.csh_payment_methods_vl" rootpath="payment_methods_list"/>
        <a:model-query fetchAll="true" model="csh.csh_pay_req_update_init_posi_list" rootpath="position_list"/>
        <a:model-query fetchAll="true" model="csh.csh_pay_req_update_init_header" rootpath="payment_requisition_header"/>
        <a:model-query fetchAll="true" model="csh.csh_payment_req_types_vl" rootpath="pay_req_type"/>
        <a:model-query fetchAll="true" model="csh.csh_pay_req_update_init_file_type" rootpath="file_types"/>
    </a:init-procedure>
    <a:view>
        <a:link id="uploadFile_link_2" url="${/request/@context_path}/uploadFile.screen"/>
        <a:link id="csh_pay_req_line_query_link" model="csh.csh_pay_req_line_query" modelaction="batch_update"/>
        <a:link id="csh_pay_req_detail_history_link_3" url="${/request/@context_path}/modules/csh/public/csh_pay_req_detail_history.screen"/>
        <a:link id="csh_payment_requisition_link" url="${/request/@context_path}/modules/csh/CSH5010/csh_payment_requisition.screen"/>
        <a:link id="csh_pay_req_submit_link" url="${/request/@context_path}/modules/csh/CSH5010/csh_pay_req_submit.svc"/>
        <a:link id="csh_pay_req_update_save_link" url="${/request/@context_path}/modules/csh/CSH5010/csh_pay_req_update_save.svc"/>
        <script><![CDATA[

            var fields = ['payment_requisition_header_id', 'operation_unit_id', 'contract_header_id', 'p_partner_id', 'p_req_id', 'p_cont_flag', 'employee_id_display', 'employee_id', 'position_id_display', 'position_id', 'requisition_date', 'requisition_number', 'partner_category_display', 'partner_category', 'partner_code', 'currency_code', 'amount', 'description', 'payment_method_id_display', 'payment_method_id', 'status_name', 'csh_type_id_display', 'csh_type_id'];
            
            
            function thi(record) {
                var grid = $('grid');
                var columns = grid.columns;
                var colcount = columns.length;
                var redname = record.get('colname');
            
                for (var i = 0;i < colcount;i++) {
                    var colname = columns[i].name;
                    if (redname == colname) {
                        grid.hideColumn(colname);
                    }
                }
            }
            
            function loadComplete() {
            
                var grid_cust = $('grid_cust_ds').getAll();
                for (var i = 0;i < grid_cust.length;i++) {
                    thi(grid_cust[i]);
                }
                var flag = '${/model/record/record/@submit_flag}';
                var source = '${/model/payment_requisition_header/record/@source_type}';
            
                var headerDataSet = $('pay_req_update_header_ds');
                var headerRecord = headerDataSet.getAt(0);
            
                if (source == 'EXP_REQUISITION') {
                    if (flag == 'Y') {
                        $('submitButton_update').disable();
                    }
                    for (var fieldNum = 0;fieldNum < fields.length;fieldNum++) {
                        headerRecord.getMeta().getField(fields[fieldNum]).setReadOnly(true);
                    }
                }
            
                var payReqHeaderRecord = $('pay_req_header_ds').getAt(0);
                
            	if(payReqHeaderRecord.get('partner_category')=='EMPLOYEE'){
            		var ds = $('exp_default_account');
            	} else if (payReqHeaderRecord.get('partner_category')=='CUSTOMER'){
            		var ds = $('customer_default_account');
            	}else{
            		var ds = $('vender_default_account');
            	}
            	
                headerRecord.isNew = false;
                headerRecord.set('_status', 'update');
            
                headerRecord.set('payment_requisition_header_id', '${/parameter/@payment_requisition_header_id}');
                headerRecord.set('operation_unit_id', payReqHeaderRecord.get('operation_unit_id'));
                headerRecord.set('p_partner_id', payReqHeaderRecord.get('partner_id'));
                headerRecord.set('p_cont_flag', payReqHeaderRecord.get('cont_flag'));
                headerRecord.set('employee_id', payReqHeaderRecord.get('employee_id'));
                headerRecord.set('position_id', payReqHeaderRecord.get('position_id'));
                headerRecord.set('requisition_date', payReqHeaderRecord.get('requisition_date'));
                headerRecord.set('requisition_number', payReqHeaderRecord.get('requisition_number'));
                headerRecord.set('partner_category', payReqHeaderRecord.get('partner_category'));
                headerRecord.set('partner_code', payReqHeaderRecord.get('p_partner_name'));
                headerRecord.set('currency_code', payReqHeaderRecord.get('currency_code'));
                headerRecord.set('amount', payReqHeaderRecord.get('amount'));
                headerRecord.set('description', payReqHeaderRecord.get('description'));
                headerRecord.set('payment_method_id', payReqHeaderRecord.get('payment_method_id'));
                headerRecord.set('status_name', payReqHeaderRecord.get('status_name'));
                headerRecord.set('csh_type_id', payReqHeaderRecord.get('payment_req_type_id'));
            
            
                headerRecord.set('position_id_display', getValueByKey('position_id', headerRecord.get('position_id'), $('position_list_ds'), 'pos_desc'));
                headerRecord.set('employee_id_display', getValueByKey('employee_id', headerRecord.get('employee_id'), $('emp_list_ds'), 'name_code'));
                headerRecord.set('partner_category_display', getValueByKey('code_value', headerRecord.get('partner_category'), $('payment_object_list_ds'), 'code_value_name'));
                headerRecord.set('payment_method_id_display', getValueByKey('payment_method_id', headerRecord.get('payment_method_id'), $('payment_methods_list_ds'), 'description'));
                headerRecord.set('csh_type_id_display', getValueByKey('type_id', headerRecord.get('csh_type_id'), $('pay_req_type_ds'), 'description'));
                var type = headerRecord.get('partner_category');
                if (type == 'EMPLOYEE') {
                    headerRecord.getMeta().getField('partner_code').setLovService('csh.csh_pay_req_emp_lov');
                } else if (type == 'CUSTOMER') {
                    headerRecord.getMeta().getField('partner_code').setLovService('csh.csh_pay_req_cus_lov');
                } else {
                    headerRecord.getMeta().getField('partner_code').setLovService('csh.csh_pay_req_ven_lov');
                }
                    ds.setQueryParameter('id', headerRecord.get('p_partner_id'));
                    ds.setQueryParameter('primary_flag', 'Y');
                    ds.query();    
                $('pay_req_update_line_ds').on('remove', function(store) {
                    records = $('pay_req_update_line_ds').getAll();
                    lineAmount = 0;
                    for (var i = 0;i < records.length;i++) {
                        lineAmount = lineAmount + records[i].get('amount');
                    }
                    headerRecord.set('amount', lineAmount);
                });
            }
            
            function headerUpdateFunction_update(dataSet, record, name, value, oldValue) {
                if (name == 'partner_category') {
                    record.set('partner_code', '');
            
                    var linesDataSet = $('pay_req_update_line_ds');
                    var lines = linesDataSet.getAll();
                    for (var i = 0;i < lines.length;i++) {
                        lines[i].set('partner_category_display', record.get('partner_category_display'));
                        lines[i].set('partner_category', value);
                        lines[i].set('p_partner_name', '');
                        lines[i].set('account_number', '');
                        lines[i].set('account_name', '');
                    }
                    if (value == 'EMPLOYEE') {
                        record.getMeta().getField('partner_code').setLovService('csh.csh_pay_req_emp_lov');
                    } else if (value == 'CUSTOMER') {
                        record.getMeta().getField('partner_code').setLovService('csh.csh_pay_req_cus_lov');
                    } else {
                        record.getMeta().getField('partner_code').setLovService('csh.csh_pay_req_ven_lov');
                    }
            
                } else if (name == 'p_partner_id') {
                    // var linesDataSet = $('pay_req_update_line_ds');
                    // var lines = linesDataSet.getAll();
                    // for (var i = 0;i < lines.length;i++) {
                        // lines[i].set('p_partner_name', record.get('partner_code'));
                        // lines[i].set('partner_id', value);
                    // }
                } else if (name == 'csh_type_id') { //增加当修改借款申请单类型后，设置行上得借款类型
                    var linesDataSet = $('pay_req_update_line_ds');
                    var lines = linesDataSet.getAll();
                    for (var i = 0;i < lines.length;i++) {
                        lines[i].set('cls_des', '');
                    }
                    $('trans_classes_ds').setQueryParameter('type_id', record.get('csh_type_id'));
                    $('trans_classes_ds').query();
                }
            }
            
            function changePartner(combo, value, display, record) {
                var dataSet = $('pay_req_update_header_ds');
                var field = record.getMeta().getField('partner_code');
                var lineField = $('pay_req_update_line_ds').getCurrentRecord().getField('p_partner_name');
                var type = record.get('partner_category');
                if (type == 'EMPLOYEE') {
                    field.setLovService('csh.csh_pay_req_emp_lov');
                    lineField.setLovService('csh.csh_pay_req_emp_lov');
                } else if (type == 'CUSTOMER') {
                    field.setLovService('csh.csh_pay_req_cus_lov');
                    lineField.setLovService('csh.csh_pay_req_cus_lov');
                } else {
                    field.setLovService('csh.csh_pay_req_ven_lov');
                    lineField.setLovService('csh.csh_pay_req_ven_lov');
                }
            }
            
            function initFunction_update(dataSet, record, index) {
                var employee_id = record.get('employee_id');
            
            }
            
            function createLineRecord() {
                var dataSet = $('pay_req_update_header_ds');
                var flag = dataSet.validate();
                if (flag) {
                    $('pay_req_update_line_ds').create();
                }
            }
            
            function saveFunction_update() {
                $('saveButton').disable();
                var headerDataSet = $('pay_req_update_header_ds');
                var lineDataSet = $('pay_req_update_line_ds');
                if (headerDataSet.validate() && lineDataSet.validate()) {
                    var param = [];
                    param = headerDataSet.getJsonData(false)[0] || [];
                    param['line'] = lineDataSet.getJsonData(false);
                    Aurora.request({
                        url: /*csh_pay_req_update_save.svc*/
                        $('csh_pay_req_update_save_link').getUrl(),
                        para: param,
                        success: function() {
                            $('pay_req_update_line_ds').query();
                        },
                        scope: this
                    });
                } else {
                    $('saveButton').enable();
                }
            }
            
            function submitFunction_update() {
                if (!checkAmount()) {
                    Aurora.showInfoMessage('${l:PROMPT}', '${l:CSH_PAYMENT_REQUISITION_HDS.CHECK1}', null, 250, 100);
                    return;
                }
            
                var headerDataSet = $('pay_req_update_header_ds');
                var lineDataSet = $('pay_req_update_line_ds');
                if (headerDataSet.validate() && lineDataSet.validate()) {
                    var param = [];
                    param = headerDataSet.getJsonData(false)[0] || [];
                    param['line'] = lineDataSet.getJsonData(false);
                    var temp = Ext.util.JSON.encode(param);
            
                    Aurora.request({
                        url: /*csh_pay_req_submit.svc*/
                        $('csh_pay_req_submit_link').getUrl(),
                        para: param,
                        success: dispatch_update,
                        scope: this
                    });
                }
            
            }
            
            function backFunction_update() {
                window.location.href = /*csh_payment_requisition.screen*/
                $('csh_payment_requisition_link').getUrl();
            }
            
            function dispatch_update() {
                window.location.href = /*csh_payment_requisition.screen*/
                $('csh_payment_requisition_link').getUrl();
                //				window.location.href='csh_payment_requisition_update.screen?payment_requisition_header_id=${/parameter/@payment_requisition_header_id}';
            }
            
            function checkAmount() {
            
                var records = $('pay_req_update_line_ds').getAll();
                var heanderAmount = $('pay_req_update_header_ds').getAt(0).get('amount');
                var lineAmount = 0;
            
                for (var i = 0;i < records.length;i++) {
                    lineAmount = lineAmount + records[i].get('amount');
                }
                if (heanderAmount == lineAmount) {
                    return true;
                } else {
                    return false;
                }
            }
            
            function addFunction_update(dataSet, record, index) {
                var dataSetHeader = $('pay_req_update_header_ds');
                var recordHeader = dataSetHeader.getAt(0);
                var lineRecords = dataSet.getSelected();
                var partner_category=recordHeader.get('partner_category');
                record.set('payment_requisition_header_id', '${/parameter/@payment_requisition_header_id}');
                record.set('description', recordHeader.get('description'));
                record.set('partner_category', recordHeader.get('partner_category'));
                record.set('partner_category_display', recordHeader.get('partner_category_display'));
                record.set('partner_id', recordHeader.get('p_partner_id'));
                record.set('p_partner_name', recordHeader.get('partner_code'));
                record.set('payment_method_id', recordHeader.get('payment_method_id'));
                record.set('payment_method_id_display', recordHeader.get('payment_method_id_display'));
            	if(partner_category=='EMPLOYEE'){
                	var accountRecord = $('exp_default_account').getCurrentRecord();
            	} else if (partner_category=='CUSTOMER'){
                	var accountRecord = $('customer_default_account').getCurrentRecord();
            	}else{
                	var accountRecord = $('vender_default_account').getCurrentRecord();
            	}
                if(accountRecord==null){
	                record.set('account_number', '');
	                record.set('account_name', '');
                }else{
	                record.set('account_number', accountRecord.get('account_number'));
	                record.set('account_name', accountRecord.get('account_name'));
                }
                
                if (lineRecords.length != 0) {
                    record.set('cls_des', lineRecords[0].get('cls_des'));
                    record.set('csh_transaction_class_code', lineRecords[0].get('csh_transaction_class_code'));
                    record.set('payment_requisition_line_type_display', lineRecords[0].get('payment_requisition_line_type_display'));
                    record.set('payment_requisition_line_type', lineRecords[0].get('payment_requisition_line_type'));
                    record.set('ref_document_id_display', lineRecords[0].get('ref_document_id_display'));
                    record.set('need_payment_amount', lineRecords[0].get('need_payment_amount'));
                    record.set('requisited_amount', lineRecords[0].get('requisited_amount'));
                    record.set('requisited_unpayment_amount', lineRecords[0].get('requisited_unpayment_amount'));
                    record.set('ref_document_id', lineRecords[0].get('ref_document_id'));
                    record.set('cont_flag', lineRecords[0].get('cont_flag'));
                    record.set('partner_category_display', lineRecords[0].get('partner_category_display'));
                    record.set('payment_schedule_line_id', lineRecords[0].get('payment_schedule_line_id'));
                    record.set('p_partner_name', lineRecords[0].get('p_partner_name'));
                    record.set('partner_id', lineRecords[0].get('partner_id'));
                    record.set('payment_method_id', lineRecords[0].get('payment_method_id'));
                    record.set('payment_method_id_display', lineRecords[0].get('payment_method_id_display'));
                    record.set('account_number', lineRecords[0].get('account_number'));
                    record.set('account_name', lineRecords[0].get('account_name'));
                    record.set('contract_number', lineRecords[0].get('contract_number'));
                    record.set('contract_header_id', lineRecords[0].get('contract_header_id'));
                    record.set('payment_schedule_line_number', lineRecords[0].get('payment_schedule_line_number'));
                    record.set('description', lineRecords[0].get('description'));
                    record.set('amount', lineRecords[0].get('amount'));
                }
            }
            
            function updateFunction_update(dataSet, record, name, value, oldValue) {
                if (name == 'contract_header_id') {
                    record.set('payment_schedule_line_number', '');
                    record.set('payment_schedule_line_id', '');
                } else if (name == 'partner_category') {
                    record.set('p_partner_name', '');
                    record.set('partner_id', '');
                } else if (name == 'p_partner_name') {
                    record.getMeta().getField('account_number').setLovPara('id', record.get('partner_id'));
                } else if (name == 'payment_requisition_line_type') {
                    if (value != 'EXP_REQUISITION') {
                        record.getMeta().getField('ref_document_id_display').setRequired(false);
                    } else {
                        record.getMeta().getField('ref_document_id_display').setRequired(true);
                    }
                }
            }
            
            function isCellEditableFunction_update(record, name) {
                if (name == 'need_payment_amount' || name == 'requisited_amount' || name == 'requisited_unpayment_amount') {
                    if (record.get('payment_requisition_line_type') == 'EXP_REQUISITION') {
                        return '';
                    } else {
                        record.set('ref_document_id', '');
                        record.set('ref_document_id_display', '');
                        record.set('need_payment_amount', '');
                        record.set('requisited_amount', '');
                        record.set('requisited_unpayment_amount', '');
                        return '';
                    }
                }
            }
            
            function amountValidator(record, name, value) {
            
                var dataSet = $('pay_req_update_line_ds');
                if (record.get('payment_requisition_line_type') == 'EXP_REQUISITION') {
                    if (value <= 0 || value > record.get('need_payment_amount')) {
                        record.set('amount', '');
                        amountChanged('');
                        return '${l:CSH_PAYMENT_REQUISITION_HDS.CHECK2}';
                    }
                    var rs = dataSet.getAll();
                    var usedAmount = 0;
                    for (var i = 0;i < rs.length;i++) {
                        var r = rs[i];
                        if (r.get('ref_document_id_display') == record.get('ref_document_id_display') && r != record) {
                            usedAmount += r.get('amount');
                        }
                    }
                    if (value + usedAmount > record.get('need_payment_amount')) {
                        record.set('amount', '');
                        amountChanged('');
                        return '${l:CSH_PAYMENT_REQUISITION_HDS.CHECK2}';
                    }
                } else {
                    if (record.get('amount') <= 0) {
                        record.set('amount', '');
                        amountChanged('');
                        return '${l:CSH_PAYMENT_REQUISITION_HDS.CHECK17}';
                    }
                }
                amountChanged();
                return true;
            }
            
            function amountChanged(value) {
                var records = $('pay_req_update_line_ds').getAll();
                var lineAmount = 0;
                for (var i = 0;i < records.length;i++) {
                    lineAmount += records[i].get('amount');
                }
                $('pay_req_update_header_ds').getAt(0).set('amount', lineAmount);
            }
            
            function isCellEditable_update() {
                var source = '${/model/payment_requisition_header/record/@source_type}';
                if (source == 'EXP_REQUISITION') {
                    $('addButton_update').disable();
                    $('deleteButton_update').disable();
                    return false;
                }
                return true;
            }
            
            function comboboxEditorFunction() {
                if (isCellEditable_update()) {
                    return 'combobox_editor_update';
                }
                return '';
            }
            
            function textfieldEditorFunction() {
                if (isCellEditable_update()) {
                    return 'textfield_editor_update';
                }
                return '';
            }
            
            function numberfieldEditorFunction() {
                if (isCellEditable_update()) {
                    return 'numberfield_editor_update';
                }
                return '';
            }
            
            function refDocIdDisEdiFunction(record, name) {
                if (isCellEditable_update()) {
                    if (name == 'ref_document_id_display') {
                        if (record.get('payment_requisition_line_type') == 'EXP_REQUISITION') {
                            return 'ref_doc_id_lov';
                        } else {
                            record.set('ref_document_id', '');
                            record.set('ref_document_id_display', '');
                            return '';
                        }
                    }
                }
                return '';
            }
            
            
            function paySchLineNumFunction(record, name) {
                if (isCellEditable_update()) {
                    if (record.get('contract_header_id')) {
                        var dataSet = $('pay_req_update_line_ds');
                        var metaField = record.getMeta().getField('payment_schedule_line_number');
                        metaField.setLovService('csh.CSH5010.csh_pay_req_schedules_lov');
                        metaField.setLovPara('contract_header_id', record.get('contract_header_id'));
                        metaField.setLovPara('currency_code', $('pay_req_update_header_ds').getAt(0).get('currency_code'));
                        metaField.setLovPara('partner_category', record.get('partner_category'));
                        metaField.setLovPara('partner_id', record.get('partner_id'));
                        return 'pay_sch_line_num_lov';
                    } else {
                        return '';
                    }
                }
                return '';
            }
            
            function conNumFunction(record, name) {
                if (isCellEditable_update()) {
                    var req_id = record.get('ref_documnt_id');
                    var dataSet = $('pay_req_update_line_ds');
                    var metaField = record.getMeta().getField('contract_number');
                    metaField.setLovService('csh.CSH5010.csh_pay_req_contract_lov');
                    if (record.get('payment_requisition_line_type') != 'EXP_REQUISITION') {
                        metaField.setLovPara('partner_category', record.get('partner_category'));
                        metaField.setLovPara('partner_id', record.get('partner_id'));
                        metaField.setLovPara('type_fg', 'OTHER');
                    } else {
                        metaField.setLovPara('ref_document_id', req_id);
                        metaField.setLovPara('partner_category', record.get('partner_category'));
                        metaField.setLovPara('partner_id', record.get('partner_id'));
                        metaField.setLovPara('type_fg', 'REQUIS');
                    }
            
                    var r = $('pay_req_update_header_ds').getAt(0);
                    r.set('p_req_id', req_id);
                    return 'con_num_lov';
                }
                return '';
            }
            
            function refDocCommitFunction_update(lov, record, record2) {
                record.set('amount', '');
            }
            
            function partnerNameCommitFunction_update(lov, record, record2) {
            
                // } else if (type == 'CUSTOMER') {
                // field.setLovService('csh.csh_pay_req_cus_lov');
                // lineField.setLovService('csh.csh_pay_req_cus_lov');
                // } else {
                // field.setLovService('csh.csh_pay_req_ven_lov');
                // lineField.setLovService('csh.csh_pay_req_ven_lov');
                // }
            }
            
            function cellClickFunction_update(grid, row, name, record) {
                if (name == 'ref_document_id_display') {
                    var r = $('pay_req_update_header_ds').getAt(0);
                    var employeeId = r.get('employee_id');
                    var currencyCode = r.get('currency_code');
                    if (employeeId == '') {
                        Aurora.showInfoMessage('${l:PROMPT}', '${l:CSH_PAYMENT_REQUISITION_HDS.CHECK7}', null, 250, 100);
                        $('employee_id_cmp').focus();
                    }
                    if (currencyCode == '') {
                        Aurora.showInfoMessage('${l:PROMPT}', '${l:CSH_PAYMENT_REQUISITION_HDS.CHECK8}', null, 250, 100);
                        $('currency_code_cmp').focus();
                    }
                    if (record.get('payment_requisition_line_type') == 'EXP_REQUISITION') {
                        var dataSet = $('pay_req_update_line_ds');
                        var metaField = record.getMeta().getField('ref_document_id_display');
                        metaField.setLovService('csh.CSH5010.csh_pay_req_exp_lov');
                        metaField.setLovPara('employee_id', employeeId);
                        metaField.setLovPara('currency_code', currencyCode);
                    }
                    if (record.get('payment_requisition_line_type') == 'EXP_REQUISITION') {
                        record.getMeta().getField('ref_document_id_display').setRequired(true);
                    } else {
                        record.getMeta().getField('ref_document_id_display').setRequired(false);
                    }
                } else if (name == 'payment_schedule_line_number') {
                    if (record.get('contract_header_id') == '') {
                        Aurora.showInfoMessage('${l:PROMPT}', '${l:CSH_PAYMENT_REQUISITION_HDS.CHECK6}', null, 250, 100);
                        return '';
                    }
                }else if (name=='p_partner_name'){
                    var lineField = record.getMeta().getField('p_partner_name');
                    var type = record.get('partner_category');
                    
	                if (type == 'EMPLOYEE') {
	                    lineField.setLovService('csh.csh_pay_req_emp_lov');
	                } else if (type == 'CUSTOMER') {
	                    lineField.setLovService('csh.csh_pay_req_cus_lov');
	                } else {
	                    lineField.setLovService('csh.csh_pay_req_ven_lov');
	                }
                } else if (name == 'contract_number') {
                    $('pay_req_update_header_ds').getAt(0).set('p_req_id', '');
                } else if (name == 'account_number') {
                    var field = record.getMeta().getField('account_number');
                    var type = record.get('partner_category');
                    if (type == 'EMPLOYEE') {
                        field.setLovService('csh.exp_employee_accounts');
                    }   else if (type == 'CUSTOMER') {
                    	field.setLovService('csh.csh_customer_accounts');
                    } else {
                    	field.setLovService('csh.csh_vender_accounts');
                    }
                    record.getMeta().getField('account_number').setLovPara('id', record.get('partner_id'));
                }
            }
            
            function updateFunction_load(ds) {
                $('saveButton').enable();
            }
            
            function checkConLine() {
                var contractHeaderId = $('pay_req_update_header_ds').get('contract_header_id');
                var recrods = $('pay_req_update_line_ds').getAll();
                for (var i = 0;i < records.length;i++) {
                    var record = records[i];
                    if (record.get('payment_requisition_line_type') == 'EXP_REQUISITION') {
                        if (contractHeaderId == '') {
                            if (record.get('contract_header_id') != '') {
                                return false;
                            }
                        }
                        if (contractHeaderId != '') {
                            if (records[i].get('contract_header_id') != contractHeaderId) {
                                return false;
                            }
                        }
                    }
                }
            }
            
            function history() {
                var head = '${/parameter/@payment_requisition_header_id}';
                var urlPath = /*csh_pay_req_detail_history.screen*/
                $('csh_pay_req_detail_history_link_3').getUrl() + '?csh_pay_header_id=' + head;
                new Aurora.Window({
                    id: 'pay_req_detail_history_screen',
                    url: urlPath,
                    title: '${l:PROMPT.HISTORY}',
                    width: 750,
                    height: 550
                });
            }
            
            function getRecordByProp(propName, key, dataSet) {
                var records = dataSet.getAll();
            
                for (var i = 0;i < records.length;i++) {
                    var record = records[i];
                    if (record.get(propName) == key) {
                        return record;
                    }
                }
                return null;
            }
            
            function getValueByKey(keyName, keyValue, dataSet, valueName) {
                var records = dataSet.getAll();
                for (var i = 0;i < records.length;i++) {
                    var record = records[i];
                    if (record.get(keyName) == keyValue) {
                        return record.get(valueName);
                    }
                }
                return null;
            }
            //add by huangshengbo @2011/07/06
            
            function deleteFuncion() {
                var rs = $('pay_req_update_line_ds').getSelected();
                for (var i = 0;i < rs.length;i++) {
                    if (rs[i].isNew) $('pay_req_update_line_ds').remove(rs[i]);
                }
            
                var records = $('pay_req_update_line_ds').getJsonData(true);
                for (var i = 0;i < records.length;i++) {
                    records[i]._status = 'delete';
                }
                Aurora.request({
                    url: /*${/request/@context_path}/autocrud/csh.csh_pay_req_line_query/batch_update*/
                    $('csh_pay_req_line_query_link').getUrl(),
                    para: records,
                    success: function(res) {
                        var headerDataSet = $('pay_req_update_header_ds');
                        var lineDataSet = $('pay_req_update_line_ds');
                        var amount_before = headerDataSet.getAt(0).get('amount');
                        var records = res.result.record;
                        if (records.length) {
                            for (var i = 0;i < records.length;i++) {
                                amount_before -= records[i].amount;
                            }
                        } else {
                            amount_before -= records.amount;
                        }
                        headerDataSet.getAt(0).set('amount', amount_before);
                        if (headerDataSet.validate() && lineDataSet.validate()) {
                            var param = [];
                            param = headerDataSet.getJsonData(false)[0] || [];
                            param['line'] = lineDataSet.getJsonData(false);
                            Aurora.request({
                                url: /*csh_pay_req_update_save.svc*/
                                $('csh_pay_req_update_save_link').getUrl(),
                                para: param,
                                success: function() {
                                    lineDataSet.query();
                                },
                                scope: this
                            });
                        }
                    },
                    scope: this
                });
            }
            
            //add by huangshengbo @2011/08/08
            
            function uploadFile() {
                var url = /*${/request/@context_path}/uploadFile.screen*/
                $('uploadFile_link_2').getUrl() + '?table_name=CSH_PAYMENT_REQUISITION_HDS&header_id=${/parameter/@payment_requisition_header_id}'
                new Aurora.Window({
                    url: url,
                    title: '${l:ATM.UPLOAD_ATTACHMENT}',
                    id: 'check_upload_file_screen',
                    width: 680,
                    height: 400
                });
            }
        ]]></script>
        <a:dataSets>
            <a:dataSet id="pay_req_header_ds">
                <a:datas dataSource="/model/payment_requisition_header"/>
            </a:dataSet>
            <a:dataSet id="grid_cust_ds">
                <a:datas dataSource="/model/grid_cust"/>
            </a:dataSet>
            <!--<a:dataSet id="trans_classes_ds">
                <a:datas dataSource="/model/trans_classes"/>
            </a:dataSet>-->
            <a:dataSet id="trans_classes_ds" model="csh.CSH5010.csh_payment_requisition_req_types"/>
            <a:dataSet id="user_ds">
                <a:datas dataSource="/model/user"/>
            </a:dataSet>
            <a:dataSet id="emp_list_ds">
                <a:datas dataSource="/model/emp_list"/>
            </a:dataSet>
            <a:dataSet id="cur_list_ds">
                <a:datas dataSource="/model/cur_list"/>
            </a:dataSet>
            <a:dataSet id="payment_methods_list_ds">
                <a:datas dataSource="/model/payment_methods_list"/>
            </a:dataSet>
            <a:dataSet id="pay_req_hd_id_ds">
                <a:datas dataSource="/model/pay_req_hd_id"/>
            </a:dataSet>
            <a:dataSet id="comp_ds">
                <a:datas dataSource="/model/comp"/>
            </a:dataSet>
            <a:dataSet id="cur_ds">
                <a:datas dataSource="/model/cur"/>
            </a:dataSet>
            <a:dataSet id="pay_req_type_ds">
                <a:datas dataSource="/model/pay_req_type"/>
            </a:dataSet>
            <a:dataSet id="position_list_ds">
                <a:datas dataSource="/model/position_list"/>
            </a:dataSet>
            <a:dataSet id="exp_default_account" model="csh.exp_employee_accounts"/>
            <a:dataSet id="customer_default_account" model="csh.csh_customer_accounts"/>
            <a:dataSet id="vender_default_account" model="csh.csh_vender_accounts"/>
            <a:dataSet id="payment_object_list_ds" lookupCode="PAYMENT_OBJECT"/>
            <a:dataSet id="doc_category_list_ds" lookupCode="PAYMENT_REQ_DOC_CATEGORY"/>
            <a:dataSet id="pay_req_update_header_ds" autoCreate="true">
                <a:fields>
                    <a:field name="payment_requisition_header_id"/>
                    <a:field name="operation_unit_id"/>
                    <a:field name="contract_header_id"/>
                    <a:field name="p_partner_id"/>
                    <a:field name="p_req_id"/>
                    <a:field name="p_cont_flag"/>
                    <a:field name="employee_id_display" displayField="name_code" options="emp_list_ds" prompt="CSH_BANK_CONTACT_PERSONS.EMPLOYEE_ID" readOnly="true" required="true" returnField="employee_id" valueField="employee_id">
                        <a:mapping>
                            <a:map from="operate_unit_id" to="operation_unit_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="employee_id"/>
                    <a:field name="position_id_display" displayField="pos_desc" options="position_list_ds" prompt="CSH_PAYMENT_REQUISITION_HDS.POSITION_ID" required="true" returnField="position_id" valueField="position_id"/>
                    <a:field name="position_id"/>
                    <a:field name="requisition_date" prompt="CSH_PAYMENT_REQUISITION_HDS.REQUISITION_DATE" required="true"/>
                    <a:field name="requisition_number" prompt="CSH_DOC_PAYMENT_COMPANY.DOCUMENT_ID" readOnly="true"/>
                    <a:field name="partner_category_display" displayField="code_value_name" options="payment_object_list_ds" prompt="EXP_REPORT_HEADERS.PAYEE_CATEGORY" required="true" returnField="partner_category" valueField="code_value"/>
                    <a:field name="partner_category"/>
                    <a:field name="partner_code" lovGridHeight="300" lovHeight="430" lovWidth="600" prompt="ACP_INVOICE_HEADERS.PAYEE_ID" required="true" title=" ">
                        <a:mapping>
                            <a:map from="partner_code" to="partner_code"/>
                            <a:map from="id" to="p_partner_id"/>
                            <a:map from="account_name" to="account_name"/>
                            <a:map from="account_number" to="account_number"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="currency_code" displayField="currency_code" options="cur_list_ds" prompt="GLD_EXCHANGE_RATES.FROM_CURRENCY" readOnly="true" required="true" returnField="currency_code" valueField="currency_code"/>
                    <a:field name="amount" prompt="CSH_PAYMENT_REQUISITION_HDS.AMOUNT" readOnly="true"/>
                    <a:field name="description" prompt="CSH_PAYMENT_REQUISITION_HDS.DESCRIPTION"/>
                    <a:field name="payment_method_id_display" displayField="description" options="payment_methods_list_ds" prompt="CSH_TRANSACTION_HEADERS.PAYMENT_METHOD_ID" required="true" returnField="payment_method_id" valueField="payment_method_id"/>
                    <a:field name="payment_method_id"/>
                    <a:field name="status_name" prompt="PUR_PURCHASE_ORDER.DOCUMENT_STATUS" readOnly="true"/>
                    <a:field name="csh_type_id_display" displayField="description" options="pay_req_type_ds" prompt="CSH_PAY_REQ_TYPES.TYPE_CODE" required="true" returnField="csh_type_id" valueField="type_id"/>
                    <a:field name="csh_type_id"/>
                </a:fields>
                <a:events>
                    <a:event name="add" handler="initFunction_update"/>
                    <a:event name="update" handler="headerUpdateFunction_update"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="pay_req_update_line_ds" autoCount="true" autoQuery="true" model="csh.csh_pay_req_line_query" queryUrl="${/request/@context_path}/autocrud/csh.csh_pay_req_line_query/query?payment_requisition_header_id=${/parameter/@payment_requisition_header_id}" selectable="true">
                <a:fields>
                    <a:field name="csh_transaction_class_code"/>
                    <a:field name="cls_des" displayField="description" options="trans_classes_ds" prompt="CSH_PAYMENT_REQUISITION_PAYMENT.SACTION_CLASS_DESC" required="true" returnField="csh_transaction_class_code" valueField="csh_transaction_class_code"/>
                    <a:field name="payment_requisition_line_type"/>
                    <a:field name="payment_requisition_line_type_display" displayField="code_value_name" options="doc_category_list_ds" prompt="CSH_PAYMENT_REQUISITION_LNS.PAYMENT_REQUISITION_LINE_TYPE" required="true" returnField="payment_requisition_line_type" valueField="code_value"/>
                    <a:field name="ref_document_id_display" lovGridHeight="300" lovHeight="430" lovWidth="650" prompt="CSH_PAYMENT_REQUISITION_LNS.REF_DOCUMENT_ID" title=" ">
                        <a:mapping>
                            <a:map from="exp_requisition_number" to="ref_document_id_display"/>
                            <a:map from="p_need_payment_amount" to="need_payment_amount"/>
                            <a:map from="p_requisited_amount" to="requisited_amount"/>
                            <a:map from="p_requisited_unpayment_amount" to="requisited_unpayment_amount"/>
                            <a:map from="exp_requisition_header_id" to="ref_document_id"/>
                            <a:map from="cont_flag" to="cont_flag"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="partner_category" required="true"/>
                    <a:field name="partner_category_display" displayField="code_value_name" options="payment_object_list_ds" prompt="EXP_REPORT_HEADERS.PAYEE_CATEGORY" returnField="partner_category" valueField="code_value"/>
                    <a:field name="partner_id"/>
                    <a:field name="p_partner_name" lovGridHeight="300" lovHeight="430" lovWidth="500" prompt="ACP_INVOICE_HEADERS.PAYEE_ID" required="true" title="ACP_INVOICE_HEADERS.PAYEE_ID">
                        <a:mapping>
                            <a:map from="partner_code" to="p_partner_name"/>
                            <a:map from="id" to="partner_id"/>
                            <a:map from="account_name" to="account_name"/>
                            <a:map from="account_number" to="account_number"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="payment_method_id_display" displayField="description" options="payment_methods_list_ds" prompt="CSH_TRANSACTION_HEADERS.PAYMENT_METHOD_ID" required="true" returnField="payment_method_id" valueField="payment_method_id"/>
                    <a:field name="payment_method_id"/>
                    <!--  lovService="csh.exp_employee_accounts" -->
                    <a:field name="account_number" lovGridHeight="300" lovHeight="430" lovWidth="750" prompt="" required="true" title="CSH_BANK_ACCOUNTS.BANK_ACCOUNT_NUM">
                        <a:mapping>
                            <a:map from="account_number" to="account_number"/>
                            <a:map from="account_name" to="account_name"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="contract_number" lovGridHeight="300" lovHeight="430" lovWidth="500" prompt="CON_CONTRACT_HEADERS.CONTRACT_NUMBER" title="CON_CONTRACT_HEADERS.CONT_DOCUMENT_NUMBER">
                        <a:mapping>
                            <a:map from="contract_number" to="contract_number"/>
                            <a:map from="contract_header_id" to="contract_header_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="payment_schedule_line_number" lovGridHeight="300" lovHeight="430" lovWidth="750" prompt="CON_PAYMENT_SCHEDULES.PAYMENT_SCHEDULE_LINE_NUMBER" title=" ">
                        <a:mapping>
                            <a:map from="payment_schedule_line_number" to="payment_schedule_line_number"/>
                            <a:map from="payment_schedule_line_id" to="payment_schedule_line_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="description" prompt="CSH_PAYMENT_REQUISITION_HDS.DESCRIPTION"/>
                    <a:field name="need_payment_amount" prompt="CSH_PAYMENT_REQUISITION_LNS.NEED_PAYMENT_AMOUNT"/>
                    <a:field name="requisited_amount" prompt="CSH_PAYMENT_REQUISITION_LNS.REQUISITED_AMOUNT"/>
                    <a:field name="requisited_unpayment_amount" prompt="CSH_PAYMENT_REQUISITION_LNS.REQUISITED_UNPAYMENT_AMOUNT"/>
                    <a:field name="amount" prompt="CSH_PAYMENT_REQUISITION_LNS.CURRENT_AMOUNT" required="true" validator="amountValidator"/>
                    <a:field name="payment_schedule_line_id"/>
                    <a:field name="payment_requisition_header_id"/>
                    <a:field name="payment_requisition_line_id"/>
                    <a:field name="contract_header_id"/>
                    <a:field name="ref_document_id"/>
                    <a:field name="cont_flag"/>
                </a:fields>
                <a:events>
                    <a:event name="add" handler="addFunction_update"/>
                    <a:event name="update" handler="updateFunction_update"/>
                    <a:event name="load" handler="updateFunction_load"/>
                </a:events>
            </a:dataSet>
        </a:dataSets>
        <a:form column="4" labelWidth="100" style="margin-left:10px;margin-top:10px;" title="CSH_PAYMENT_REQUISITION_HDS.CREATE" width="980">
            <a:textField name="requisition_number" bindTarget="pay_req_update_header_ds"/>
            <a:comboBox name="csh_type_id_display" bindTarget="pay_req_update_header_ds"/>
            <a:datePicker name="requisition_date" bindTarget="pay_req_update_header_ds"/>
            <a:comboBox name="currency_code" id="currency_code_cmp" bindTarget="pay_req_update_header_ds"/>
            <a:comboBox name="employee_id_display" id="employee_id_cmp" bindTarget="pay_req_update_header_ds"><![CDATA[
            ]]></a:comboBox>
            <a:comboBox name="position_id_display" bindTarget="pay_req_update_header_ds"/>
            <a:comboBox name="partner_category_display" bindTarget="pay_req_update_header_ds">
                <a:events>
                    <a:event name="select" handler="changePartner"/>
                </a:events>
            </a:comboBox>
            <a:lov name="partner_code" bindTarget="pay_req_update_header_ds"/>
            <a:textField name="amount" bindTarget="pay_req_update_header_ds"/>
            <a:textField name="status_name" bindTarget="pay_req_update_header_ds"/>
            <a:comboBox name="payment_method_id_display" bindTarget="pay_req_update_header_ds"/>
            <a:textField name="description" bindTarget="pay_req_update_header_ds"/>
        </a:form>
        <a:hBox style="margin-left:10px;margin-top:10px;">
            <a:button click="uploadFile" text="PROMPT.UPLOAD_ATTACHMENT"/>
            <a:button click="history" text="PROMPT.HISTORY"/>
            <a:button id="saveButton" click="saveFunction_update" text="HAP_SAVE"/>
            <a:button id="submitButton_update" click="submitFunction_update" text="PROMPT.SUBMIT"/>
            <a:button click="backFunction_update" text="HAP_BACK"/>
        </a:hBox>
        <a:grid id="grid" bindTarget="pay_req_update_line_ds" height="350" navBar="true" style="margin-left:10px;margin-top:10px" width="980">
            <a:toolBar>
                <a:button id="addButton_update" click="createLineRecord" icon="${/request/@context_path}/images/add.gif" text="HAP_NEW"/>
                <a:button id="deleteButton_update" click="deleteFuncion" icon="${/request/@context_path}/images/remove.gif" text="HAP_DELETE"/>
            </a:toolBar>
            <a:columns>
                <a:column name="cls_des" align="center" editorFunction="comboboxEditorFunction" width="150"/>
                <a:column name="payment_requisition_line_type_display" align="center" editorFunction="comboboxEditorFunction" width="150"/>
                <a:column name="ref_document_id_display" align="center" editorFunction="refDocIdDisEdiFunction" width="150"/>
                <a:column name="partner_category_display" align="center" editor="combobox_editor_update"/>
                <a:column name="p_partner_name" align="center" editor="p_partner_name_lov"/>
                <a:column name="payment_method_id_display" align="center" editor="combobox_editor_update" prompt="ACP.DESCRIPTION_METHOD"/>
                <a:column name="account_number" align="center" editor="con_num_lov" prompt="CSH_BANK_ACCOUNTS.BANK_ACCOUNT_NUM"/>
                <a:column name="account_name" align="center" prompt="EXP_EMPLOYEE_ACCOUNTS.BANK_ACCOUNT_NAME"/>
                <a:column name="need_payment_amount" align="right" editorFunction="isCellEditableFunction_update"/>
                <a:column name="requisited_amount" align="right" editorFunction="isCellEditableFunction_update"/>
                <a:column name="requisited_unpayment_amount" align="right" editorFunction="isCellEditableFunction_update"/>
                <a:column name="amount" align="right" editorFunction="numberfieldEditorFunction"/>
                <a:column name="contract_number" align="center" editorFunction="conNumFunction"/>
                <a:column name="payment_schedule_line_number" align="center" editorFunction="paySchLineNumFunction"/>
                <a:column name="description" align="left" editorFunction="textfieldEditorFunction"/>
            </a:columns>
            <a:editors>
                <a:comboBox id="combobox_editor_update"/>
                <a:textField id="textfield_editor_update"/>
                <a:lov id="ref_doc_id_lov">
                    <a:events>
                        <a:event name="commit" handler="refDocCommitFunction_update"/>
                    </a:events>
                </a:lov>
                <a:lov id="con_num_lov"/>
                <a:lov id="p_partner_name_lov">
                    <a:events>
                        <a:event name="commit" handler="partnerNameCommitFunction_update"/>
                    </a:events>
                </a:lov>
                <a:lov id="pay_sch_line_num_lov"/>
                <a:numberField id="numberfield_editor_update"/>
            </a:editors>
            <a:events>
                <a:event name="cellclick" handler="cellClickFunction_update"/>
            </a:events>
        </a:grid>
        <script><![CDATA[        		
        		loadComplete();
        	
        ]]></script>
    </a:view>
</a:screen>
