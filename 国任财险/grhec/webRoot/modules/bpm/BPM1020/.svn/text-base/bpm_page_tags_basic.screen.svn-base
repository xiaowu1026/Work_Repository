<?xml version="1.0" encoding="UTF-8"?>
<a:screen xmlns:a="http://www.aurora-framework.org/application" trace="true">
    <a:view>
        <a:link id="bpm_page_tags_data_guide_link" url="${/request/@context_path}/modules/bpm/BPM1020/bpm_page_tags_data_guide.screen"/>
        <a:link id="bpm_page_tags_combobox_options_link" url="${/request/@context_path}/modules/bpm/BPM1020/bpm_page_tags_combobox_options.screen"/>
        <a:link id="bpm_page_tags_combobox_mapper_link" url="${/request/@context_path}/modules/bpm/BPM1020/bpm_page_tags_combobox_mapper.screen"/>
        <a:link id="bpm_page_tags_lov_mapper_link" url="${/request/@context_path}/modules/bpm/BPM1020/bpm_page_tags_lov_mapper.screen"/>
        <a:link id="bpm_page_tags_lov_mapper_bmurl_link" url="${/request/@context_path}/modules/bpm/BPM1020/bpm_page_tags_lov_mapper_bmurl.screen"/>
        <a:link id="bpm_page_tags_radio_options_link" url="${/request/@context_path}/modules/bpm/BPM1020/bpm_page_tags_radio_options.screen"/>
        <a:link id="bpm_page_tags_combobox_sqltext_fields_init_link" url="${/request/@context_path}/modules/bpm/BPM1020/bpm_page_tags_combobox_sqltext_fields_init.svc"/>
        <a:link id="bpm_page_tags_combobox_fields_link" url="${/request/@context_path}/modules/bpm/BPM1020/bpm_page_tags_combobox_fields.screen"/>
        <a:link id="bpm_page_tags_lov_fields_link" url="${/request/@context_path}/modules/bpm/BPM1020/bpm_page_tags_lov_fields.screen"/>
        <a:link id="bpm_page_tags_lov_sqltext_fields_init_link" url="${/request/@context_path}/modules/bpm/BPM1020/bpm_page_tags_lov_sqltext_fields_init.svc"/>
        <a:link id="bpm_page_init_tag_mapper_link" model="db.bpm_core_pkg.init_tag_mapper" modelaction="execute"/>
        <script><![CDATA[

            function saveLayoutFunction() {
                $('bpm_page_tags_basic_result_ds').submit();
            }
            
            function previewFunction() {
                window.open('${/request/@context_path}/' + $('bpm_page_groups_result_ds').getCurrentRecord().get('template_screen') + '?page_id=' + $('bpm_pages_result_ds').getCurrentRecord().get('page_id') + '&refresh_cache=Y');
            }
            
            function backFunction() {
                $('bpm_page_tags_basic_screen').close();
            }
            
            function onUpdate(dataSet, record, name, value, oldValue) {
                // if (name == 'template_flag') {
                // record.set('field_name', '');
                // record.set('field_id', '');
                // if (value == 'Y') {
                // record.getField('field_name').setReadOnly(true);
                // record.getField('field_name').setRequired(false);
                // } else {
                // record.getField('field_name').setReadOnly(false);
                // record.getField('field_name').setRequired(true);
                // }
                // } else
                if (name == 'tag_type') {
                    //每次更新标签类型需要重置所有字段的状态
                    record.getField('field_name').setReadOnly(false);
                    record.getField('field_name').setRequired(true);
            
                    record.getField('tf_typecase_desc').setReadOnly(true);
                    record.getField('tf_typecase').setReadOnly(true);
            
                    record.getField('nf_allowdecimals').setReadOnly(true);
                    record.getField('nf_decimalprecision').setReadOnly(true);
                    record.getField('nf_allownegative').setReadOnly(true);
                    record.getField('nf_allowformat').setReadOnly(true);
            
                    record.getField('cb_datasource_desc').setReadOnly(true);
                    record.getField('cb_datasource_desc').setRequired(false);
                    record.getField('cb_datasource').setReadOnly(true);
                    record.getField('cb_datasource').setRequired(false);
                    record.getField('cb_valuefield').setReadOnly(true);
                    record.getField('cb_valuefield').setRequired(false);
                    record.getField('cb_returnfield').setReadOnly(true);
                    record.getField('cb_returnfield').setRequired(false);
                    record.getField('cb_displayfield').setReadOnly(true);
                    record.getField('cb_displayfield').setRequired(false);
                    record.getField('cb_syscode').setReadOnly(true);
                    record.getField('cb_syscode').setRequired(false);
                    record.getField('cb_sqltext').setReadOnly(true);
                    record.getField('cb_sqltext').setRequired(false);
            
                    record.getField('lov_datasource_desc').setReadOnly(true);
                    record.getField('lov_datasource_desc').setRequired(false);
                    record.getField('lov_lovservice').setReadOnly(true);
                    record.getField('lov_lovurl').setReadOnly(true);
                    record.getField('lov_lovautoquery').setReadOnly(true);
                    record.getField('lov_lovgridheight').setReadOnly(true);
                    record.getField('lov_lovheight').setReadOnly(true);
                    record.getField('lov_lovwidth').setReadOnly(true);
                    record.getField('lov_lovlabelwidth').setReadOnly(true);
                    record.getField('lov_autocomplete').setReadOnly(true);
                    record.getField('lov_autocompletefield').setReadOnly(true);
                    record.getField('lov_title').setReadOnly(true);
                    record.getField('lov_syscode').setReadOnly(true);
                    record.getField('lov_syscode').setRequired(false);
                    record.getField('lov_sqltext').setReadOnly(true);
                    record.getField('lov_sqltext').setRequired(false);
            
                    record.getField('l_renderer').setReadOnly(true);
            
                    record.getField('r_datasource_desc').setReadOnly(true);
                    record.getField('r_datasource_desc').setRequired(false);
                    record.getField('r_options').setReadOnly(true);
                    record.getField('r_valuefield').setReadOnly(true);
                    record.getField('r_labelexpression').setReadOnly(true);
                    record.getField('r_labelfield').setReadOnly(true);
                    record.getField('r_layout_desc').setReadOnly(true);
                    record.getField('r_syscode').setReadOnly(true);
                    record.getField('r_syscode').setRequired(false);
            
                    record.getField('ck_checkedvalue').setReadOnly(true);
                    record.getField('ck_checkedvalue').setRequired(false);
                    record.getField('ck_uncheckedvalue').setReadOnly(true);
                    record.getField('ck_uncheckedvalue').setRequired(false);
                    record.getField('ck_label').setReadOnly(true);
            
                    record.getField('dk_dayrenderer').setReadOnly(true);
                    record.getField('dk_enablebesidedays').setReadOnly(true);
                    record.getField('dk_enablemonthbtn').setReadOnly(true);
                    record.getField('dk_viewsize').setReadOnly(true);
                    record.getField('dk_renderer').setReadOnly(true);
            
                    record.getField('dtk_dayrenderer').setReadOnly(true);
                    record.getField('dtk_enablebesidedays').setReadOnly(true);
                    record.getField('dtk_enablemonthbtn').setReadOnly(true);
                    record.getField('dtk_viewsize').setReadOnly(true);
                    record.getField('dtk_renderer').setReadOnly(true);
                    record.getField('dtk_hour').setReadOnly(true);
                    record.getField('dtk_minute').setReadOnly(true);
                    record.getField('dtk_second').setReadOnly(true);
            
                    record.set('tf_typecase_desc', '');
                    record.set('tf_typecase', '');
                    record.set('nf_allowdecimals', 'false');
                    record.set('nf_decimalprecision', '');
                    record.set('nf_allownegative', 'false');
                    record.set('nf_allowformat', 'false');
                    record.set('cb_datasource_desc', '');
                    record.set('cb_datasource', '');
                    record.set('cb_options', '');
                    record.set('cb_valuefield', '');
                    //record.set('cb_returnfield_desc', '');
                    //record.set('cb_returnfield', '');
                    record.set('cb_displayfield', '');
                    record.set('cb_syscode', '');
                    record.set('cb_sqltext', '');
                    record.set('lov_datasource_desc', '');
                    record.set('lov_datasource', '');
                    record.set('lov_lovservice', '');
                    record.set('lov_lovurl', '');
                    record.set('lov_lovautoquery', 'true');
                    record.set('lov_lovgridheight', '');
                    record.set('lov_lovheight', '');
                    record.set('lov_lovwidth', '');
                    record.set('lov_lovlabelwidth', '');
                    record.set('lov_autocomplete', 'true');
                    record.set('lov_autocompletefield', '');
                    record.set('lov_title', '');
                    record.set('lov_sqltext', '');
                    record.set('lov_syscode', '');
                    record.set('l_renderer', '');
                    record.set('r_datasource_desc', '');
                    record.set('r_datasource', '');
                    record.set('r_options', '');
                    record.set('r_valuefield', '');
                    record.set('r_labelexpression', '');
                    record.set('r_labelfield', '');
                    record.set('r_layout_desc', '');
                    record.set('r_layout', '');
                    record.set('r_syscode', '');
                    record.set('r_sqltext', '');
                    record.set('ck_checkedvalue', '');
                    record.set('ck_uncheckedvalue', '');
                    record.set('ck_label', '');
                    record.set('dk_dayrenderer', '');
                    record.set('dk_enablebesidedays', 'true');
                    record.set('dk_enablemonthbtn', 'true');
                    record.set('dk_viewsize', '');
                    record.set('dk_renderer', '');
                    record.set('dtk_dayrenderer', '');
                    record.set('dtk_enablebesidedays', 'true');
                    record.set('dtk_enablemonthbtn', 'true');
                    record.set('dtk_viewsize', '');
                    record.set('dtk_renderer', '');
                    record.set('dtk_hour', '');
                    record.set('dtk_minute', '');
                    record.set('dtk_second', '');
            
                    if (value == 'merge_column') {
                        record.getField('field_name').setReadOnly(true);
                        record.getField('field_name').setRequired(false);
                        record.getField('name').setReadOnly(true);
                        record.getField('defaultvalue').setReadOnly(true);
                        record.getField('readonly').setReadOnly(true);
                        record.getField('required').setReadOnly(true);
                        record.getField('validator').setReadOnly(true);
                        record.getField('requiredmessage').setReadOnly(true);
                        //record.getField('width').setReadOnly(true);
                        record.getField('id').setReadOnly(true);
                        record.getField('bindtarget').setReadOnly(true);
                        record.getField('height').setReadOnly(true);
                        record.getField('style').setReadOnly(true);
                        record.getField('colspan').setReadOnly(true);
                        record.getField('rowspan').setReadOnly(true);
                        //record.getField('align').setReadOnly(true);
                        record.getField('editor').setReadOnly(true);
                        record.getField('editorfunction').setReadOnly(true);
                        record.getField('footerrenderer').setReadOnly(true);
                        record.getField('renderer').setReadOnly(true);
                        record.getField('resizable').setReadOnly(true);
                        record.getField('sortable').setReadOnly(true);
                    } else if (value == 'textField') {
                        record.getField('tf_typecase_desc').setReadOnly(false);
                        record.getField('tf_typecase').setReadOnly(false);
                    } else if (value == 'numberField') {
                        record.getField('nf_allowdecimals').setReadOnly(false);
                        record.getField('nf_allownegative').setReadOnly(false);
                        record.getField('nf_allowformat').setReadOnly(false);
                    } else if (value == 'comboBox') {
                        record.getField('cb_datasource_desc').setReadOnly(false);
                        record.getField('cb_datasource_desc').setRequired(true);
                        record.getField('cb_valuefield').setReadOnly(false);
                        //record.getField('cb_valuefield').setRequired(true);
                        record.getField('cb_returnfield').setReadOnly(false);
                        //record.getField('cb_returnfield_desc').setRequired(true);
                        record.getField('cb_displayfield').setReadOnly(false);
                        //record.getField('cb_displayfield').setRequired(true);
                    } else if (value == 'lov') {
                        record.getField('lov_datasource_desc').setReadOnly(false);
                        record.getField('lov_datasource_desc').setRequired(true);
                        record.getField('lov_lovautoquery').setReadOnly(false);
                        record.getField('lov_lovgridheight').setReadOnly(false);
                        record.getField('lov_lovheight').setReadOnly(false);
                        record.getField('lov_lovwidth').setReadOnly(false);
                        record.getField('lov_lovlabelwidth').setReadOnly(false);
                        record.getField('lov_autocomplete').setReadOnly(false);
                        record.getField('lov_autocompletefield').setReadOnly(false);
                        record.getField('lov_title').setReadOnly(false);
                        // record.getField('lov_lovservice').setReadOnly(false);
                        // record.getField('lov_lovurl').setReadOnly(false);
                        // record.getField('lov_sqltext').setReadOnly(false);
                        // record.getField('lov_syscode').setReadOnly(false);
                    } else if (value == 'label') {
                        record.getField('l_renderer').setReadOnly(false);
                    } else if (value == 'radio') {
                        record.getField('r_datasource_desc').setReadOnly(false);
                        record.getField('r_datasource_desc').setRequired(true);
                        record.getField('r_valuefield').setReadOnly(false);
                        record.getField('r_labelexpression').setReadOnly(false);
                        record.getField('r_labelfield').setReadOnly(false);
                        record.getField('r_layout_desc').setReadOnly(false);
                        // record.getField('r_syscode').setReadOnly(false);
                        // record.getField('r_sqltext').setReadOnly(false);
                    } else if (value == 'checkBox') {
                        //页面展示时显示在右边的描述（仅当组件为FORM时）
                        var layout_type = '${/parameter/@layout_type}';
                        if (layout_type == 'form' || layout_type == 'fieldSet' || layout_type == 'box' || layout_type == 'vBox' || layout_type == 'hBox') {
                            record.getField('ck_label').setReadOnly(false);
                        }
                        record.getField('ck_checkedvalue').setReadOnly(false);
                        record.getField('ck_checkedvalue').setRequired(true);
                        record.getField('ck_uncheckedvalue').setReadOnly(false);
                        record.getField('ck_uncheckedvalue').setRequired(true);
                    } else if (value == 'datePicker') {
                        record.getField('dk_dayrenderer').setReadOnly(false);
                        record.getField('dk_enablebesidedays').setReadOnly(false);
                        record.getField('dk_enablemonthbtn').setReadOnly(false);
                        record.getField('dk_viewsize').setReadOnly(false);
                        record.getField('dk_renderer').setReadOnly(false);
                    } else if (value == 'dateTimePicker') {
                        record.getField('dtk_dayrenderer').setReadOnly(false);
                        record.getField('dtk_enablebesidedays').setReadOnly(false);
                        record.getField('dtk_enablemonthbtn').setReadOnly(false);
                        record.getField('dtk_viewsize').setReadOnly(false);
                        record.getField('dtk_renderer').setReadOnly(false);
                        record.getField('dtk_hour').setReadOnly(false);
                        record.getField('dtk_minute').setReadOnly(false);
                        record.getField('dtk_second').setReadOnly(false);
                    }
            
                } else if (name == 'nf_allowdecimals') {
                    //只有勾选了允许小数位才能设置小数精度
                    if (value == 'true') {
                        record.getField('nf_decimalprecision').setReadOnly(false);
                    } else if (value == 'false') {
                        record.getField('nf_decimalprecision').setReadOnly(true);
                    }
            
                } else if (name == 'cb_datasource') {
                    //更新comboBox取数来源需要重置所有字段的状态
                    record.getField('cb_valuefield').setRequired(false);
                    record.getField('cb_valuefield').setReadOnly(true);
            
                    record.getField('cb_displayfield').setRequired(false);
                    record.getField('cb_displayfield').setReadOnly(true);
                    record.getField('cb_syscode').setRequired(false);
                    record.getField('cb_syscode').setReadOnly(true);
                    record.getField('cb_sqltext').setRequired(false);
                    record.getField('cb_sqltext').setReadOnly(true);
            
                    record.set('cb_valuefield', '');
                    //record.set('cb_returnfield', '');
                    //record.set('cb_returnfield_desc', '');
                    record.set('cb_displayfield', '');
                    record.set('cb_syscode', '');
                    record.set('cb_sqltext', '');
                    // record.getField('cb_valuefield').setReadOnly(true);
                    // record.getField('cb_returnfield').setReadOnly(true);
                    // record.getField('cb_displayfield').setReadOnly(true);
            
                    //取数来源对应的取数域控制必输和不可编辑
                    if (value == 'OPTIONS') {
                        //record.getField('nf_decimalprecision').setReadOnly(false);
                    } else if (value == 'SYSCODE') {
                        record.getField('cb_syscode').setReadOnly(false);
                        record.getField('cb_syscode').setRequired(true);
                    } else if (value == 'SQLTEXT') {
                        //record.getField('cb_valuefield').setRequired(true);
                        record.getField('cb_valuefield').setReadOnly(false);
                        //record.getField('cb_displayfield').setRequired(true);
                        record.getField('cb_displayfield').setReadOnly(false);
                        record.getField('cb_sqltext').setReadOnly(false);
                        record.getField('cb_sqltext').setRequired(true);
                    }
            
                } else if (name == 'lov_datasource') {
                    //更新lov取数来源需要重置所有字段的状态
                    record.getField('lov_lovservice').setReadOnly(true);
                    record.getField('lov_lovservice').setRequired(false);
                    record.getField('lov_lovurl').setReadOnly(true);
                    record.getField('lov_lovurl').setRequired(false);
                    record.getField('lov_sqltext').setReadOnly(true);
                    record.getField('lov_sqltext').setRequired(false);
            
                    record.set('lov_lovservice', '');
                    record.set('lov_lovurl', '');
                    record.set('lov_lovautoquery', 'true');
                    record.set('lov_lovgridheight', '');
                    record.set('lov_lovheight', '');
                    record.set('lov_lovwidth', '');
                    record.set('lov_lovlabelwidth', '');
                    record.set('lov_autocomplete', 'true');
                    record.set('lov_autocompletefield', '');
                    record.set('lov_title', '');
                    record.set('lov_sqltext', '');
                    record.set('lov_syscode', '');
            
                    //取数来源对应的取数域控制必输和不可编辑
                    if (value == 'BM') {
                        record.getField('lov_lovservice').setReadOnly(false);
                        record.getField('lov_lovservice').setRequired(true);
                    } else if (value == 'URL') {
                        record.getField('lov_lovurl').setReadOnly(false);
                        record.getField('lov_lovurl').setRequired(true);
                    } else if (value == 'SQLTEXT') {
                        record.getField('lov_sqltext').setReadOnly(false);
                        record.getField('lov_sqltext').setRequired(true);
                    }
            
                } else if (name == 'r_datasource') {
                    //更新radio取数来源需要重置所有字段的状态
                    record.getField('r_syscode').setReadOnly(true);
                    record.getField('r_syscode').setRequired(false);
            
                    record.set('r_valuefield', '');
                    record.set('r_labelexpression', '');
                    record.set('r_labelfield', '');
                    //record.set('r_layout', '');
                    record.set('r_syscode', '');
                    record.set('r_sqltext', '');
            
                    //取数来源对应的取数域控制必输和不可编辑
                    if (value == 'OPTIONS') {
                        //record.getField('lov_syscode').setReadOnly(false);
                    } else if (value == 'SYSCODE') {
                        record.getField('r_syscode').setReadOnly(false);
                        record.getField('r_syscode').setRequired(true);
                    }
            
                }
            }
            
            function onAdd(ds, record, index) {
                //record.getField('parent_layout_desc').setLovPara('template_id', record.get('template_id'));
                record.getField('field_name').setLovPara('layout_id', record.get('layout_id'));
                record.getField('parent_tag_desc').setLovPara('layout_id', record.get('layout_id'));
                //record.getField('cb_returnfield_desc').setLovPara('layout_id', record.get('layout_id'));
                var layout_type = '${/parameter/@layout_type}';
                //box为没有title的form，可以设置所占行数和所占列数，但是hBox和vBox是流式布局，没有行数列数属性
                if (layout_type == 'form' || layout_type == 'fieldSet' || layout_type == 'box') {
                    //record.getField('width').setReadOnly(false);
                    record.getField('height').setReadOnly(false);
                    record.getField('colspan').setReadOnly(false);
                    record.getField('rowspan').setReadOnly(false);
                } else if (layout_type == 'grid') {
                    record.getField('align_desc').setReadOnly(false);
                    record.getField('cloumnwidth').setReadOnly(false);
                    record.getField('footerrenderer').setReadOnly(false);
                    record.getField('lock').setReadOnly(false);
                    record.getField('sortable').setReadOnly(false);
                    record.getField('parent_tag_desc').setReadOnly(false);
                }
            
                var lineNum = 0;
                var records = ds.getAll();
                for (var i = 0;i < ds.getAll().length - 1;i++) {
                    if (records[i].get('tag_sequence') > lineNum) {
                        lineNum = records[i].get('tag_sequence');
                    }
                }
                record.set('tag_sequence', (Math.floor(lineNum / 10) + 1) * 10);
            }
            
            function onLoad(ds) {
                var records = ds.getAll();
                var layout_type = '${/parameter/@layout_type}';
            
            
                //不同的标签类型设置各个tab页的字段可编辑
                for (var i = 0;i < records.length;i++) {
                    var tag_type = records[i].get('tag_type');
                    records[i].getField('field_name').setLovPara('layout_id', records[i].get('layout_id'));
                    records[i].getField('parent_tag_desc').setLovPara('layout_id', records[i].get('layout_id'));
                    //records[i].getField('cb_returnfield_desc').setLovPara('layout_id', records[i].get('layout_id'));
                    if ((layout_type == 'form' && tag_type != 'merge_column') || layout_type == 'fieldSet' || layout_type == 'box') {
                        //records[i].getField('width').setReadOnly(false);
                        records[i].getField('height').setReadOnly(false);
                        records[i].getField('colspan').setReadOnly(false);
                        records[i].getField('rowspan').setReadOnly(false);
                    } else if (layout_type == 'grid') {
                        records[i].getField('align_desc').setReadOnly(false);
                        records[i].getField('cloumnwidth').setReadOnly(false);
                        records[i].getField('footerrenderer').setReadOnly(false);
                        records[i].getField('lock').setReadOnly(false);
                        records[i].getField('sortable').setReadOnly(false);
                        records[i].getField('parent_tag_desc').setReadOnly(false);
            
                    }
            
                    //当【模板】“勾选”时不可维护标签ID、标签类型,不为必输
                    if (records[i].get('template_flag') == 'Y') {
                        records[i].getField('field_name').setReadOnly(true);
                        records[i].getField('field_name').setRequired(false);
            
                        records[i].getField('tag_sequence').setReadOnly(true);
                        records[i].getField('tag_sequence').setRequired(false);
                        records[i].getField('tag_code').setReadOnly(true);
                        records[i].getField('tag_code').setRequired(false);
                        records[i].getField('tag_type_desc').setReadOnly(true);
                        records[i].getField('tag_type_desc').setRequired(false);
                    } else if (records[i].get('template_flag') == 'N') {
                        records[i].getField('field_name').setReadOnly(false);
                        records[i].getField('field_name').setRequired(true);
            
                        records[i].getField('tag_sequence').setReadOnly(false);
                        records[i].getField('tag_sequence').setRequired(true);
                        records[i].getField('tag_code').setReadOnly(false);
                        records[i].getField('tag_code').setRequired(true);
                        records[i].getField('tag_type_desc').setReadOnly(false);
                        records[i].getField('tag_type_desc').setRequired(true);
            
            
                        if (records[i].get('tag_type') == 'merge_column') {
                            records[i].getField('field_name').setReadOnly(true);
                            records[i].getField('field_name').setRequired(false);
                            records[i].getField('name').setReadOnly(true);
                            records[i].getField('defaultvalue').setReadOnly(true);
                            records[i].getField('readonly').setReadOnly(true);
                            records[i].getField('required').setReadOnly(true);
                            records[i].getField('validator').setReadOnly(true);
                            records[i].getField('requiredmessage').setReadOnly(true);
                            records[i].getField('width').setReadOnly(true);
                            records[i].getField('id').setReadOnly(true);
                            records[i].getField('bindtarget').setReadOnly(true);
                            records[i].getField('height').setReadOnly(true);
                            records[i].getField('style').setReadOnly(true);
                            records[i].getField('colspan').setReadOnly(true);
                            records[i].getField('rowspan').setReadOnly(true);
                            //records[i].getField('align').setReadOnly(true);
                            records[i].getField('editor').setReadOnly(true);
                            records[i].getField('editorfunction').setReadOnly(true);
                            records[i].getField('footerrenderer').setReadOnly(true);
                            records[i].getField('renderer').setReadOnly(true);
                            records[i].getField('resizable').setReadOnly(true);
                            records[i].getField('sortable').setReadOnly(true);
                        } else if (records[i].get('tag_type') == 'textField') {
                            records[i].getField('tf_typecase_desc').setReadOnly(false);
                            records[i].getField('tf_typecase').setReadOnly(false);
                        } else if (records[i].get('tag_type') == 'numberField') {
                            records[i].getField('nf_allowdecimals').setReadOnly(false);
                            if (records[i].get('nf_allowdecimals') == 'true') {
                                records[i].getField('nf_decimalprecision').setReadOnly(false);
                            }
                            records[i].getField('nf_allownegative').setReadOnly(false);
                            records[i].getField('nf_allowformat').setReadOnly(false);
                        } else if (records[i].get('tag_type') == 'comboBox') {
                            records[i].getField('cb_datasource_desc').setReadOnly(false);
                            records[i].getField('cb_datasource_desc').setRequired(true);
                            records[i].getField('cb_valuefield').setReadOnly(true);
                            records[i].getField('cb_valuefield').setRequired(false);
                            //records[i].getField('cb_returnfield_desc').setReadOnly(false);
                            //records[i].getField('cb_returnfield_desc').setRequired(true);
                            records[i].getField('cb_displayfield').setReadOnly(true);
                            records[i].getField('cb_displayfield').setRequired(false);
            
                            //取数来源对应的取数域控制必输和不可编辑
                            if (records[i].get('cb_datasource') == 'OPTIONS') {
                                //record.getField('nf_decimalprecision').setReadOnly(false);
                            } else if (records[i].get('cb_datasource') == 'SYSCODE') {
                                records[i].getField('cb_syscode').setReadOnly(false);
                                records[i].getField('cb_syscode').setRequired(true);
                            } else if (records[i].get('cb_datasource') == 'SQLTEXT') {
                                records[i].getField('cb_valuefield').setLovPara('tag_id', records[i].get('tag_id'));
                                records[i].getField('cb_displayfield').setLovPara('tag_id', records[i].get('tag_id'));
                                records[i].getField('cb_valuefield').setReadOnly(false);
                                //records[i].getField('cb_valuefield').setRequired(true);
                                records[i].getField('cb_displayfield').setReadOnly(false);
                                //records[i].getField('cb_displayfield').setRequired(true);
                                records[i].getField('cb_sqltext').setReadOnly(false);
                                records[i].getField('cb_sqltext').setRequired(true);
                            }
                        } else if (records[i].get('tag_type') == 'lov') {
            
                            records[i].getField('lov_datasource_desc').setReadOnly(false);
                            records[i].getField('lov_datasource_desc').setRequired(true);
                            records[i].getField('lov_lovautoquery').setReadOnly(false);
                            records[i].getField('lov_lovgridheight').setReadOnly(false);
                            records[i].getField('lov_lovheight').setReadOnly(false);
                            records[i].getField('lov_lovwidth').setReadOnly(false);
                            records[i].getField('lov_lovlabelwidth').setReadOnly(false);
                            records[i].getField('lov_autocomplete').setReadOnly(false);
                            records[i].getField('lov_autocompletefield').setReadOnly(false);
                            records[i].getField('lov_title').setReadOnly(false);
            
                            //取数来源对应的取数域控制必输和不可编辑
                            if (records[i].get('lov_datasource') == 'BM') {
                                records[i].getField('lov_lovservice').setReadOnly(false);
                                records[i].getField('lov_lovservice').setRequired(true);
                            } else if (records[i].get('lov_datasource') == 'URL') {
                                records[i].getField('lov_lovurl').setReadOnly(false);
                                records[i].getField('lov_lovurl').setRequired(true);
                            } else if (records[i].get('lov_datasource') == 'SQLTEXT') {
                                records[i].getField('lov_sqltext').setReadOnly(false);
                                records[i].getField('lov_sqltext').setRequired(true);
                            }
                        } else if (records[i].get('tag_type') == 'label') {
                            records[i].getField('l_renderer').setReadOnly(false);
                        } else if (records[i].get('tag_type') == 'radio') {
                            records[i].getField('r_datasource_desc').setReadOnly(false);
                            records[i].getField('r_datasource_desc').setRequired(true);
                            records[i].getField('r_valuefield').setReadOnly(false);
                            records[i].getField('r_labelexpression').setReadOnly(false);
                            records[i].getField('r_labelfield').setReadOnly(false);
                            records[i].getField('r_layout_desc').setReadOnly(false);
            
                            //取数来源对应的取数域控制必输和不可编辑
                            if (records[i].get('r_datasource') == 'OPTIONS') {
                                //record.getField('lov_syscode').setReadOnly(false);
                            } else if (records[i].get('r_datasource') == 'SYSCODE') {
                                records[i].getField('r_syscode').setReadOnly(false);
                                records[i].getField('r_syscode').setRequired(true);
                            }
                        } else if (records[i].get('tag_type') == 'checkBox') {
                            //页面展示时显示在右边的描述（仅当组件为FORM时）
                            if (layout_type == 'form' || layout_type == 'fieldSet' || layout_type == 'box' || layout_type == 'vBox' || layout_type == 'hBox') {
                                records[i].getField('ck_label').setReadOnly(false);
                            }
                            records[i].getField('ck_checkedvalue').setReadOnly(false);
                            records[i].getField('ck_checkedvalue').setRequired(true);
                            records[i].getField('ck_uncheckedvalue').setReadOnly(false);
                            records[i].getField('ck_uncheckedvalue').setRequired(true);
            
                        } else if (records[i].get('tag_type') == 'datePicker') {
                            records[i].getField('dk_dayrenderer').setReadOnly(false);
                            records[i].getField('dk_enablebesidedays').setReadOnly(false);
                            records[i].getField('dk_enablemonthbtn').setReadOnly(false);
                            records[i].getField('dk_viewsize').setReadOnly(false);
                            records[i].getField('dk_renderer').setReadOnly(false);
                        } else if (records[i].get('tag_type') == 'dateTimePicker') {
                            records[i].getField('dtk_dayrenderer').setReadOnly(false);
                            records[i].getField('dtk_enablebesidedays').setReadOnly(false);
                            records[i].getField('dtk_enablemonthbtn').setReadOnly(false);
                            records[i].getField('dtk_viewsize').setReadOnly(false);
                            records[i].getField('dtk_renderer').setReadOnly(false);
                            records[i].getField('dtk_hour').setReadOnly(false);
                            records[i].getField('dtk_minute').setReadOnly(false);
                            records[i].getField('dtk_second').setReadOnly(false);
                        }
                    }
                }
            }
            
            function newDataGuideFunction(tag_id) {
                new Aurora.Window({
                    id: 'bpm_page_tags_data_guide_screen',
                    url: $('bpm_page_tags_data_guide_link').getUrl() + '?tag_id=' + tag_id,
                    title: '${l:BPM_PAGE_TAGS_BASIC.DATA_GUIDE}',
                    fullScreen: true
                });
            }
            
            function dataGuideRenderer(value, record, name) {
                if (record.isNew) {
                    return '';
                }
                return '<a href="javascript:newDataGuideFunction(' + record.get('tag_id') + ')">' + '${l:BPM_PAGE_TAGS_BASIC.DATA_GUIDE}' + '</a>';
            }
            
            function cbParseSqlFunction(value, record, name) {
                var tag_id = record.get('tag_id');
                var tag_type = record.get('tag_type');
                var cb_datasource = record.get('cb_datasource');
                var recordIndex = $('bpm_page_tags_basic_result_ds').indexOf(record);
                if (tag_id && tag_type == 'comboBox' && cb_datasource == 'SQLTEXT') {
                    return '<a href="javascript:cbParseSql(' + tag_id + ',' + recordIndex + ')">' + '${l:BPM_PAGE_TAGS_BASIC.SQLTEXT_PARSE}' + '</a>';
                }
            }
            
            function cbParseSql(tag_id, recordIndex) {
                var record = $('bpm_page_tags_basic_result_ds').getAt(recordIndex);
                var cb_sqltext = record.get('cb_sqltext');
                Aurora.request({
                    url: $('bpm_page_tags_combobox_sqltext_fields_init_link').getUrl(),
                    para: {
                        tag_id: tag_id,
                        sqltext: cb_sqltext
                    },
                    success: function viewCbSql() {
                        record.getField('cb_valuefield').setLovPara('tag_id', tag_id);
                        record.getField('cb_displayfield').setLovPara('tag_id', tag_id);
                        new Aurora.Window({
                            id: 'bpm_page_tags_combobox_fields_screen',
                            url: $('bpm_page_tags_combobox_fields_link').getUrl() + '?tag_id=' + tag_id,
                            title: '${l:BPM_PAGE_TAGS_BASIC.SQLTEXT_PARSE}',
                            fullScreen: true
                        });
                    },
                    scope: this
                });
            }
            
            function lovParseSqlFunction(value, record, name) {
                var tag_id = record.get('tag_id');
                var tag_type = record.get('tag_type');
                var lov_datasource = record.get('lov_datasource');
                var recordIndex = $('bpm_page_tags_basic_result_ds').indexOf(record);
                if (tag_id && tag_type == 'lov' && lov_datasource == 'SQLTEXT') {
                    return '<a href="javascript:lovParseSql(' + tag_id + ',' + recordIndex + ')">' + '${l:BPM_PAGE_TAGS_BASIC.SQLTEXT_PARSE}' + '</a>';
                }
            }
            
            function lovParseSql(tag_id, recordIndex) {
                var record = $('bpm_page_tags_basic_result_ds').getAt(recordIndex);
                var lov_sqltext = record.get('lov_sqltext');
                Aurora.request({
                    url: $('bpm_page_tags_lov_sqltext_fields_init_link').getUrl(),
                    para: {
                        tag_id: tag_id,
                        sqltext: lov_sqltext
                    },
                    success: function() {
                        new Aurora.Window({
                            id: 'bpm_page_tags_lov_fields_screen',
                            url: $('bpm_page_tags_lov_fields_link').getUrl() + '?tag_id=' + tag_id,
                            title: '${l:BPM_PAGE_TAGS_BASIC.SQLTEXT_PARSE}',
                            fullScreen: true
                        });
                    },
                    scope: this
                });
            }
            
            function OptionsFunction(value, record, name) {
                var tag_id = record.get('tag_id');
                var tag_type = record.get('tag_type');
                var cb_datasource = record.get('cb_datasource');
                if (tag_id && tag_type == 'comboBox' && cb_datasource == 'OPTIONS') { /* if(tag_id){ */
                    return '<a href="javascript:OptionsView(' + tag_id + ')">' + '${l:BPM_PAGE_TAGS_COMBOBOX.OPTIONS}' + '</a>';
                }
            }
            
            function OptionsView(tag_id) {
                new Aurora.Window({
                    id: 'bpm_page_tags_combobox_options_screen',
                    url: $('bpm_page_tags_combobox_options_link').getUrl() + '?tag_id=' + tag_id,
                    title: '${l:BPM_PAGE_TAGS_COMBOBOX.OPTIONS}',
                    fullScreen: true
                });
            }
            
            function WritebackFunction(value, record, name) {
                var tag_id = record.get('tag_id');
                var tag_type = record.get('tag_type');
                if (tag_id && tag_type == 'comboBox') { /* if(tag_id){ */
                    return '<a href="javascript:WritebackView(' + tag_id + ')">' + '${l:BPM_PAGE_TAGS_COMBOBOX.MAPPER}' + '</a>';
                }
            }
            
            function WritebackView(tag_id) {
                var layout_id = '${/parameter/@layout_id}';
                new Aurora.Window({
                    id: 'bpm_page_tags_combobox_mapper_screen',
                    url: $('bpm_page_tags_combobox_mapper_link').getUrl() + '?tag_id=' + tag_id + '&layout_id=' + layout_id,
                    title: '${l:BPM_PAGE_TAGS_COMBOBOX.MAPPER}',
                    fullScreen: true
                });
            }
            
            
            function LovWritebackFunction(value, record, name) {
                var tag_id = record.get('tag_id');
                var tag_type = record.get('tag_type');
                //根据当前取数来源，BM和URL均设置为手动输入而不是从sql解析出的字段值获取
                var lov_datasource = record.get('lov_datasource');
                var mapper_type;
                if (lov_datasource == 'SQLTEXT') {
                    mapper_type = 1;
                } else if (lov_datasource == 'BM' || lov_datasource == 'URL') {
                    mapper_type = 2;
                }
                if (tag_id && tag_type == 'lov') { /* if(tag_id){ */
                    return '<a href="javascript:LovWritebackInit(' + tag_id + ',' + mapper_type + ')">' + '${l:BPM_PAGE_TAGS_LOV.MAPPER}' + '</a>';
                }
            }
            
            function LovWritebackInit(tag_id, mapper_type) {
                var layout_id = '${/parameter/@layout_id}';
                if (mapper_type == 1) {
                    Aurora.request({
                        url: $('bpm_page_init_tag_mapper_link').getUrl(),
                        para: {
                            tag_id: tag_id
                        },
                        success: function LovWritebackView() {
                            new Aurora.Window({
                                id: 'bpm_page_tags_lov_mapper_screen',
                                url: $('bpm_page_tags_lov_mapper_link').getUrl() + '?tag_id=' + tag_id + '&layout_id=' + layout_id,
                                title: '${l:BPM_PAGE_TAGS_LOV.MAPPER}',
                                fullScreen: true
                            });
                        },
                        error: function() {
                            Aurora.showMessage('${l:PROMPT}', '回写数据初始化失败！');
                        },
                        scope: this
                    });
                } else if (mapper_type == 2) {
                    new Aurora.Window({
                        id: 'bpm_page_tags_lov_mapper_bmurl_screen',
                        url: $('bpm_page_tags_lov_mapper_bmurl_link').getUrl() + '?tag_id=' + tag_id + '&layout_id=' + layout_id,
                        title: '${l:BPM_PAGE_TAGS_LOV.MAPPER}',
                        fullScreen: true
                    });
                }
            }
            
            function RadioOptionsFunction(value, record, name) {
                var tag_id = record.get('tag_id');
                var tag_type = record.get('tag_type');
                var r_datasource = record.get('r_datasource');
                if (tag_id && tag_type == 'radio' && r_datasource == 'OPTIONS') { /* if(tag_id){ */
                    return '<a href="javascript:RadioOptionsView(' + tag_id + ')">' + '${l:BPM_PAGE_TAGS_RADIO.OPTIONS}' + '</a>';
                }
            }
            
            function RadioOptionsView(tag_id) {
                new Aurora.Window({
                    id: 'bpm_page_tags_radio_options_screen',
                    url: $('bpm_page_tags_radio_options_link').getUrl() + '?tag_id=' + tag_id,
                    title: '${l:BPM_PAGE_TAGS_RADIO.OPTIONS}',
                    fullScreen: true
                });
            }
            
            function EditorFunction(record, name) {
                var tag_type = record.get('tag_type');
            
                if (record.get('template_flag') == 'N') {
                    if (name == 'tag_sequence') {
                        return 'editor_nm';
                    } else if (name == 'tag_code') {
                        return 'editor_tf';
                    } else if (name == 'tag_type_desc') {
                        return 'editor_cb';
                    } else if (name == 'field_name' && tag_type != 'merge_column') {
                        return 'editor_lov';
                    }
                }
            
                if (name == 'readonly' && tag_type != 'merge_column') {
                    return 'editor_ck';
                } else if (name == 'required' && tag_type != 'merge_column') {
                    return 'editor_ck';
                } else if (name == 'defaultvalue' && tag_type != 'merge_column') {
                    return 'editor_ta';
                }
            
                var layout_type = '${/parameter/@layout_type}';
                if ((layout_type == 'form' && tag_type != 'merge_column') || layout_type == 'fieldSet' || layout_type == 'box') {
                    if (name == 'height') {
                        return 'editor_nm';
                    } else if (name == 'colspan') {
                        return 'editor_nm';
                    } else if (name == 'rowspan') {
                        return 'editor_nm';
                    }
                } else if (layout_type == 'grid') {
                    if (name == 'align_desc') {
                        return 'editor_cb';
                    } else if (name == 'footerrenderer') {
                        return 'editor_ck';
                    } else if (name == 'lock') {
                        return 'editor_ck';
                    } else if (name == 'sortable' && tag_type != 'merge_column') {
                        return 'editor_ck';
                    } else if (name == 'parent_tag_desc') {
                        return 'editor_lov';
                    }
                }
            
                return '';
            }
            
            function tfEditorFunction(record, name) {
                var tag_type = record.get('tag_type');
            
                if (record.get('template_flag') == 'N') {
                    if (name == 'tag_sequence') {
                        return 'tf_editor_nm';
                    } else if (name == 'tag_code') {
                        return 'tf_editor_tf';
                    } else if (name == 'tag_type_desc') {
                        return 'tf_editor_cb';
                    }
                }
            
                if (record.get('tag_type') == 'textField') {
                    if (name == 'tf_typecase_desc') {
                        return 'tf_editor_cb';
                    }
                }
            
                return '';
            }
            
            function nmEditorFunction(record, name) {
                var tag_type = record.get('tag_type');
            
                if (record.get('template_flag') == 'N') {
                    if (name == 'tag_sequence') {
                        return 'nf_editor_nm';
                    } else if (name == 'tag_code') {
                        return 'nf_editor_tf';
                    } else if (name == 'tag_type_desc') {
                        return 'nf_editor_cb';
                    }
                }
            
                if (tag_type == 'numberField') {
                    if (name == 'nf_allowdecimals') {
                        return 'nf_editor_ck';
                    } else if (name == 'nf_decimalprecision') {
                        if (record.get('nf_allowdecimals') == 'true') {
                            return 'nf_editor_nm';
                        }
                    } else if (name == 'nf_allownegative') {
                        return 'nf_editor_ck';
                    } else if (name == 'nf_allowformat') {
                        return 'nf_editor_ck';
                    }
                }
            
                return '';
            }
            
            function cbEditorFunction(record, name) {
                var tag_type = record.get('tag_type');
            
                if (record.get('template_flag') == 'N') {
                    if (name == 'tag_sequence') {
                        return 'cb_editor_nm';
                    } else if (name == 'tag_code') {
                        return 'cb_editor_tf';
                    } else if (name == 'tag_type_desc') {
                        return 'cb_editor_cb';
                    }
                }
            
                if (tag_type == 'comboBox') {
                    if (name == 'cb_datasource_desc') {
                        return 'cb_editor_cb';
                    } else if (name == 'cb_valuefield') {
                        if (record.get('cb_datasource') == 'SQLTEXT') {
                            return 'cb_editor_lov';
                        }
                    } else if (name == 'cb_displayfield') {
                        if (record.get('cb_datasource') == 'SQLTEXT') {
                            return 'cb_editor_lov';
                        }
                    } else if (name == 'cb_syscode') {
                        if (record.get('cb_datasource') == 'SYSCODE') {
                            return 'cb_editor_lov';
                        }
                    } else if (name == 'cb_sqltext') {
                        if (record.get('cb_datasource') == 'SQLTEXT') {
                            return 'cb_editor_lov';
                        }
                    }
                }
            
                return '';
            }
            
            function lovEditorFunction(record, name) {
                var tag_type = record.get('tag_type');
            
                if (record.get('template_flag') == 'N') {
                    if (name == 'tag_sequence') {
                        return 'lov_editor_nm';
                    } else if (name == 'tag_code') {
                        return 'lov_editor_tf';
                    } else if (name == 'tag_type_desc') {
                        return 'lov_editor_cb';
                    }
                }
            
                if (tag_type == 'lov') {
                    if (name == 'lov_datasource_desc') {
                        return 'lov_editor_cb';
                    } else if (name == 'lov_lovservice') {
                        if (record.get('lov_datasource') == 'BM') {
                            return 'lov_editor_tf';
                        }
                    } else if (name == 'lov_lovurl') {
                        if (record.get('lov_datasource') == 'URL') {
                            return 'lov_editor_tf';
                        }
                    } else if (name == 'lov_lovautoquery') {
                        return 'lov_editor_ck';
                    } else if (name == 'lov_lovgridheight') {
                        return 'lov_editor_nm';
                    } else if (name == 'lov_lovheight') {
                        return 'lov_editor_nm';
                    } else if (name == 'lov_lovwidth') {
                        return 'lov_editor_nm';
                    } else if (name == 'lov_lovlabelwidth') {
                        return 'lov_editor_nm';
                    } else if (name == 'lov_autocomplete') {
                        return 'lov_editor_ck';
                    } else if (name == 'lov_autocompletefield') {
                        return 'lov_editor_tf';
                    } else if (name == 'lov_title') {
                        return 'lov_editor_tf';
                    } else if (name == 'lov_sqltext') {
                        if (record.get('lov_datasource') == 'SQLTEXT') {
                            return 'lov_editor_lov';
                        }
                    } else if (name == 'lov_syscode') {
                        if (record.get('lov_datasource') == 'SYSCODE') {
                            return 'lov_editor_tf';
                        }
                    }
                }
            
                return '';
            }
            
            function lEditorFunction(record, name) {
                var tag_type = record.get('tag_type');
            
                if (record.get('template_flag') == 'N') {
                    if (name == 'tag_sequence') {
                        return 'l_editor_nm';
                    } else if (name == 'tag_code') {
                        return 'l_editor_tf';
                    } else if (name == 'tag_type_desc') {
                        return 'l_editor_cb';
                    }
                }
            
                if (tag_type == 'label') {
                    if (name == 'l_renderer') {
                        return 'l_editor_tf';
                    }
                }
            
                return '';
            }
            
            function rEditorFunction(record, name) {
                var tag_type = record.get('tag_type');
            
                if (record.get('template_flag') == 'N') {
                    if (name == 'tag_sequence') {
                        return 'r_editor_nm';
                    } else if (name == 'tag_code') {
                        return 'r_editor_tf';
                    } else if (name == 'tag_type_desc') {
                        return 'r_editor_cb';
                    }
                }
            
                if (tag_type == 'radio') {
                    if (name == 'r_datasource_desc') {
                        return 'r_editor_cb';
                    } else if (name == 'r_options') {
                        if (record.get('r_datasource') == 'OPTIONS') {
                            return 'r_editor_tf';
                        }
                    } else if (name == 'r_valuefield') {
                        return 'r_editor_tf';
                    } else if (name == 'r_labelexpression') {
                        return 'r_editor_tf';
                    } else if (name == 'r_layout_desc') {
                        return 'r_editor_cb';
                    } else if (name == 'r_syscode') {
                        if (record.get('r_datasource') == 'SYSCODE') {
                            return 'r_editor_lov';
                        }
                    } else if (name == 'r_sqltext') {
                        if (record.get('r_datasource') == 'SQLTEXT') {
                            return 'r_editor_tf';
                        }
                    }
                }
            
                return '';
            }
            
            function ckEditorFunction(record, name) {
                var tag_type = record.get('tag_type');
                var layout_type = '${/parameter/@layout_type}';
            
                if (record.get('template_flag') == 'N') {
                    if (name == 'tag_sequence') {
                        return 'ck_editor_nm';
                    } else if (name == 'tag_code') {
                        return 'ck_editor_tf';
                    } else if (name == 'tag_type_desc') {
                        return 'ck_editor_cb';
                    }
                }
            
                if (tag_type == 'checkBox') {
                    if (name == 'ck_checkedvalue') {
                        return 'ck_editor_tf';
                    } else if (name == 'ck_uncheckedvalue') {
                        return 'ck_editor_tf';
                    } else if (name == 'ck_label') {
                        if (layout_type == 'form' || layout_type == 'fieldSet' || layout_type == 'box' || layout_type == 'vBox' || layout_type == 'hBox') {
                            return 'ck_editor_tf';
                        }
                    }
                }
            
                return '';
            }
            
            function dkEditorFunction(record, name) {
                var tag_type = record.get('tag_type');
            
                if (record.get('template_flag') == 'N') {
                    if (name == 'tag_sequence') {
                        return 'dk_editor_nm';
                    } else if (name == 'tag_code') {
                        return 'dk_editor_tf';
                    } else if (name == 'tag_type_desc') {
                        return 'dk_editor_cb';
                    }
                }
            
                if (tag_type == 'datePicker') {
                    if (name == 'dk_dayrenderer') {
                        return 'dk_editor_tf';
                    } else if (name == 'dk_enablebesidedays') {
                        return 'dk_editor_ck';
                    } else if (name == 'dk_enablemonthbtn') {
                        return 'dk_editor_ck';
                    } else if (name == 'dk_viewsize') {
                        return 'dk_editor_nm';
                    } else if (name == 'dk_renderer') {
                        return 'dk_editor_tf';
                    }
                }
            
                return '';
            }
            
            function dtkEditorFunction(record, name) {
                var tag_type = record.get('tag_type');
            
                if (record.get('template_flag') == 'N') {
                    if (name == 'tag_sequence') {
                        return 'dtk_editor_nm';
                    } else if (name == 'tag_code') {
                        return 'dtk_editor_tf';
                    } else if (name == 'tag_type_desc') {
                        return 'dtk_editor_cb';
                    }
                }
            
                if (tag_type == 'dateTimePicker') {
                    if (name == 'dtk_dayrenderer') {
                        return 'dtk_editor_tf';
                    } else if (name == 'dtk_enablebesidedays') {
                        return 'dtk_editor_ck';
                    } else if (name == 'dtk_enablemonthbtn') {
                        return 'dtk_editor_ck';
                    } else if (name == 'dtk_viewsize') {
                        return 'dtk_editor_nm';
                    } else if (name == 'dtk_renderer') {
                        return 'dtk_editor_tf';
                    } else if (name == 'dtk_hour') {
                        return 'dtk_editor_nm';
                    } else if (name == 'dtk_minute') {
                        return 'dtk_editor_nm';
                    } else if (name == 'dtk_second') {
                        return 'dtk_editor_nm';
                    }
                }
            
                return '';
            }
        ]]></script>
        <a:dataSets>
            <a:dataSet id="tag_type_list" autoCreate="true" autoQuery="true" lookupCode="BPM_TAG_TYPE"/>
            <a:dataSet id="tf_typecase_list" autoCreate="true" autoQuery="true" lookupCode="BPM_TAG_TYPECASE"/>
            <a:dataSet id="tag_alignment_list" autoCreate="true" autoQuery="true" lookupCode="BPM_TAG_ALIGNMENT"/>
            <a:dataSet id="tag_radio_layout_list" autoCreate="true" autoQuery="true" lookupCode="BPM_TAG_RADIO_LAYOUT"/>
            <a:dataSet id="tag_com_datasource_type_list" autoCreate="true" autoQuery="true" lookupCode="BPM_TAG_COM_DATASOURCE"/>
            <a:dataSet id="tag_lov_datasource_type_list" autoCreate="true" autoQuery="true" lookupCode="BPM_TAG_LOV_DATASOURCE"/>
            <a:dataSet id="tag_radio_datasource_type_list" autoCreate="true" autoQuery="true" lookupCode="BPM_TAG_RADIO_DATA_SOURCE"/>
            <a:dataSet id="bpm_page_tags_basic_result_ds" autoQuery="true" model="bpm.BPM1020.bpm_page_tags_basic_all" pageSize="20" queryUrl="${/request/@context_path}/autocrud/bpm.BPM1020.bpm_page_tags_basic_all/query?layout_id=${/parameter/@layout_id}" selectable="true">
                <a:fields>
                    <a:field name="tag_id"/>
                    <a:field name="layout_id" defaultValue="${/parameter/@layout_id}"/>
                    <a:field name="layout_type" defaultValue="${/parameter/@layout_type}"/>
                    <a:field name="tag_sequence" required="true"/>
                    <a:field name="tag_code" required="true" typeCase="upper"/>
                    <a:field name="tag_desc"/>
                    <a:field name="tag_type_desc" displayfield="code_value_name" options="tag_type_list" prompt="BPM_PAGE_TAGS_BASIC.TAG_TYPE" required="true" returnField="tag_type" valueField="code_value"/>
                    <a:field name="tag_type"/>
                    <a:field name="template_flag" checkedValue="Y" defaultValue="N" readOnly="true" uncheckedValue="N"/>
                    <a:field name="field_name" lovGridHeight="300" lovHeight="460" lovService="bpm.BPM1020.bpm_page_tags_ref_field" lovWidth="500" prompt="BPM_PAGE_TAGS_BASIC.FIELD_ID" required="true" title="BPM_PAGE_TAGS_BASIC.FIELD_ID">
                        <a:mapping>
                            <a:map from="field_id" to="field_id"/>
                            <a:map from="name" to="field_name"/>
                            <a:map from="desc" to="tag_desc"/>
                            <a:map from="returnfield_desc" to="cb_returnfield_desc"/>
                            <a:map from="returnfield_name" to="cb_returnfield"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="field_id"/>
                    <a:field name="name"/>
                    <a:field name="defaultvalue"/>
                    <a:field name="readonly" checkedValue="true" defaultValue="false" uncheckedValue="false"/>
                    <a:field name="required" checkedValue="true" defaultValue="false" uncheckedValue="false"/>
                    <a:field name="prompt"/>
                    <a:field name="validator"/>
                    <a:field name="requiredmessage"/>
                    <a:field name="id"/>
                    <a:field name="bindtarget"/>
                    <a:field name="width"/>
                    <a:field name="height" readOnly="true"/>
                    <a:field name="style"/>
                    <a:field name="colspan" readOnly="true"/>
                    <a:field name="rowspan" readOnly="true"/>
                    <a:field name="hidden" checkedValue="true" defaultValue="false" uncheckedValue="false"/>
                    <a:field name="parent_tag_desc" lovGridHeight="300" lovHeight="460" lovService="bpm.BPM1020.bpm_page_tags_basic_parent_lov" lovWidth="500" prompt="BPM_PAGE_TAGS_BASIC.PARENT_TAG_ID" readOnly="true" title="BPM_PAGE_TAGS_BASIC.PARENT_TAG_ID">
                        <a:mapping>
                            <a:map from="tag_desc" to="parent_tag_desc"/>
                            <a:map from="tag_id" to="parent_tag_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="parent_tag_id"/>
                    <a:field name="align_desc" displayfield="code_value_name" options="tag_alignment_list" prompt="BPM_PAGE_TAGS_BASIC.ALIGN" readOnly="true" returnField="align" valueField="code_value"/>
                    <a:field name="align"/>
                    <a:field name="cloumnwidth" readOnly="true"/>
                    <a:field name="editor"/>
                    <a:field name="editorfunction"/>
                    <a:field name="footerrenderer" checkedValue="Y" defaultValue="N" readOnly="true" uncheckedValue="N"/>
                    <a:field name="lock" checkedValue="true" defaultValue="false" readOnly="true" uncheckedValue="false"/>
                    <a:field name="renderer"/>
                    <a:field name="resizable" checkedValue="true" defaultValue="true" uncheckedValue="false"/>
                    <a:field name="sortable" checkedValue="true" defaultValue="false" readOnly="true" uncheckedValue="false"/>
                    <a:field name="tf_typecase_desc" displayfield="code_value_name" options="tf_typecase_list" prompt="BPM_PAGE_TAGS_BASIC.TAG_TYPE" readOnly="true" returnField="tf_typecase" valueField="code_value"/>
                    <a:field name="tf_typecase" readOnly="true"/>
                    <a:field name="nf_allowdecimals" checkedValue="true" defaultValue="false" readOnly="true" uncheckedValue="false"/>
                    <a:field name="nf_decimalprecision" readOnly="true"/>
                    <a:field name="nf_allownegative" checkedValue="true" defaultValue="false" readOnly="true" uncheckedValue="false"/>
                    <a:field name="nf_allowformat" checkedValue="true" defaultValue="false" readOnly="true" uncheckedValue="false"/>
                    <a:field name="cb_datasource_desc" displayfield="code_value_name" options="tag_com_datasource_type_list" prompt="BPM_PAGE_TAGS_BASIC.DATASOURCE" readOnly="true" returnField="cb_datasource" valueField="code_value"/>
                    <a:field name="cb_datasource"/>
                    <a:field name="cb_options" readOnly="true"/>
                    <a:field name="cb_valuefield" lovGridHeight="300" lovHeight="460" lovService="bpm.BPM1020.bpm_page_tags_combobox_fields" lovWidth="250" prompt="BPM_PAGE_TAGS_BASIC.CB_VALUEFIELD" readOnly="true" title="BPM_PAGE_TAGS_BASIC.CB_VALUEFIELD">
                        <a:mapping>
                            <a:map from="combobox_field" to="cb_valuefield"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="cb_returnfield_desc"/>
                    <a:field name="cb_returnfield"/>
                    <a:field name="cb_displayfield" lovGridHeight="300" lovHeight="460" lovService="bpm.BPM1020.bpm_page_tags_combobox_fields" lovWidth="250" prompt="BPM_PAGE_TAGS_BASIC.CB_DISPLAYFIELD" readOnly="true" title="BPM_PAGE_TAGS_BASIC.CB_DISPLAYFIELD">
                        <a:mapping>
                            <a:map from="combobox_field" to="cb_displayfield"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="cb_syscode" lovGridHeight="300" lovHeight="460" lovService="bpm.BPM1020.bpm_page_tags_combobox_syscode_lov" lovWidth="500" prompt="BPM_PAGE_TAGS_BASIC.CB_SYSCODE" readOnly="true" title="BPM_PAGE_TAGS_BASIC.CB_SYSCODE">
                        <a:mapping>
                            <a:map from="code" to="cb_syscode"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="cb_sqltext" lovHeight="400" lovUrl="${/request/@context_path}/modules/bpm/BPM1020/bpm_page_tags_combobox_sqltext_lov.screen" lovWidth="800" readOnly="true"/>
                    <a:field name="lov_datasource_desc" displayfield="code_value_name" options="tag_lov_datasource_type_list" prompt="BPM_PAGE_TAGS_BASIC.DATASOURCE" readOnly="true" returnField="lov_datasource" valueField="code_value"/>
                    <a:field name="lov_datasource" readOnly="true"/>
                    <a:field name="lov_lovservice" readOnly="true"/>
                    <a:field name="lov_lovurl" readOnly="true"/>
                    <a:field name="lov_lovautoquery" checkedValue="true" defaultValue="true" readOnly="true" uncheckedValue="false"/>
                    <a:field name="lov_lovgridheight" readOnly="true"/>
                    <a:field name="lov_lovheight" readOnly="true"/>
                    <a:field name="lov_lovwidth" readOnly="true"/>
                    <a:field name="lov_lovlabelwidth" readOnly="true"/>
                    <a:field name="lov_autocomplete" checkedValue="true" defaultValue="true" readOnly="true" uncheckedValue="false"/>
                    <a:field name="lov_autocompletefield" readOnly="true"/>
                    <a:field name="lov_title" readOnly="true"/>
                    <a:field name="lov_sqltext" lovHeight="400" lovUrl="${/request/@context_path}/modules/bpm/BPM1020/bpm_page_tags_lov_sqltext_lov.screen" lovWidth="800" readOnly="true"/>
                    <a:field name="lov_syscode" readOnly="true"/>
                    <a:field name="l_renderer" readOnly="true"/>
                    <a:field name="r_datasource_desc" displayfield="code_value_name" options="tag_radio_datasource_type_list" prompt="BPM_PAGE_TAGS_BASIC.DATASOURCE" readOnly="true" returnField="r_datasource" valueField="code_value"/>
                    <a:field name="r_datasource" readOnly="true"/>
                    <a:field name="r_options" readOnly="true"/>
                    <a:field name="r_valuefield" readOnly="true"/>
                    <a:field name="r_labelexpression" readOnly="true"/>
                    <a:field name="r_labelfield" readOnly="true"/>
                    <a:field name="r_layout_desc" displayfield="code_value_name" options="tag_radio_layout_list" prompt="BPM_PAGE_TAGS_BASIC.R_LAYOUT" readOnly="true" returnField="r_layout" valueField="code_value"/>
                    <a:field name="r_layout" readOnly="true"/>
                    <a:field name="r_syscode" lovGridHeight="300" lovHeight="460" lovService="bpm.BPM1020.bpm_page_tags_combobox_syscode_lov" lovWidth="500" prompt="BPM_PAGE_TAGS_BASIC.R_SYSCODE" readOnly="true" title="BPM_PAGE_TAGS_BASIC.R_SYSCODE">
                        <a:mapping>
                            <a:map from="code" to="r_syscode"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="r_sqltext" readOnly="true"/>
                    <a:field name="ck_checkedvalue" readOnly="true"/>
                    <a:field name="ck_uncheckedvalue" readOnly="true"/>
                    <a:field name="ck_label" readOnly="true"/>
                    <a:field name="dk_dayrenderer" readOnly="true"/>
                    <a:field name="dk_enablebesidedays" checkedValue="true" defaultValue="true" readOnly="true" uncheckedValue="false"/>
                    <a:field name="dk_enablemonthbtn" checkedValue="true" defaultValue="true" readOnly="true" uncheckedValue="false"/>
                    <a:field name="dk_viewsize" readOnly="true"/>
                    <a:field name="dk_renderer" readOnly="true"/>
                    <a:field name="dtk_dayrenderer" readOnly="true"/>
                    <a:field name="dtk_enablebesidedays" checkedValue="true" defaultValue="true" readOnly="true" uncheckedValue="false"/>
                    <a:field name="dtk_enablemonthbtn" checkedValue="true" defaultValue="true" readOnly="true" uncheckedValue="false"/>
                    <a:field name="dtk_viewsize" readOnly="true"/>
                    <a:field name="dtk_renderer" readOnly="true"/>
                    <a:field name="dtk_hour" readOnly="true"/>
                    <a:field name="dtk_minute" readOnly="true"/>
                    <a:field name="dtk_second" readOnly="true"/>
                    <a:field name="printable" checkedValue="true" defaultValue="true" uncheckedValue="false"/>
                </a:fields>
                <a:events>
                    <a:event name="update" handler="onUpdate"/>
                    <a:event name="load" handler="onLoad"/>
                    <a:event name="add" handler="onAdd"/>
                </a:events>
            </a:dataSet>
        </a:dataSets>
        <a:screenBody>
            <a:form labelWidth="100" row="3" title="BPM_PAGE_TAGS_BASIC.BPM_PAGE_TAGS_BASIC" width="800">
                <a:label name="group_type_desc" bindTarget="bpm_page_groups_result_ds" prompt="BPM_PAGE_GROUPS.GRUOP_TYPE"/>
                <a:label name="group_code" bindTarget="bpm_page_groups_result_ds" prompt="BPM_PAGE_GROUPS.GRUOP_CODE"/>
                <a:label name="group_desc" bindTarget="bpm_page_groups_result_ds" prompt="BPM_PAGE_GROUPS.GRUOP_DESC"/>
                <a:label name="page_type_desc" bindTarget="bpm_pages_result_ds" prompt="BPM_PAGES.PAGE_TYPE"/>
                <a:label name="page_code" bindTarget="bpm_pages_result_ds" prompt="BPM_PAGES.PAGE_CODE"/>
                <a:label name="page_desc" bindTarget="bpm_pages_result_ds" prompt="BPM_PAGES.PAGE_DESC"/>
                <a:label name="layout_type_desc" bindTarget="bpm_page_layout_basic_ds" prompt="BPM_PAGE_LAYOUT_BASIC.LAYOUT_TYPE"/>
                <a:label name="layout_code" bindTarget="bpm_page_layout_basic_ds" prompt="BPM_PAGE_LAYOUT_BASIC.LAYOUT_CODE"/>
                <a:label name="layout_desc" bindTarget="bpm_page_layout_basic_ds" prompt="BPM_PAGE_LAYOUT_BASIC.LAYOUT_DESC"/>
            </a:form>
            <a:hBox>
                <a:button click="saveLayoutFunction" text="HAP_SAVE"/>
                <a:button click="previewFunction" text="WFL.PREVIEW"/>
                <a:button click="backFunction" text="HAP_BACK"/>
            </a:hBox>
            <a:tabPanel id="bpm_page_tags_tab" height="280" marginHeight="220" marginWidth="25" width="1280">
                <a:tabs>
                    <a:tab bindTarget="bpm_page_tags_basic_result_ds" prompt="BPM_PAGE_TAGS_BASIC.BPM_PAGE_TAGS_BASIC_INFO" width="100">
                        <a:grid bindTarget="bpm_page_tags_basic_result_ds" height="200" marginHeight="250" marginWidth="30" navBar="true" width="1270">
                            <a:toolBar>
                                <a:button type="add"/>
                                <a:button type="delete"/>
                            </a:toolBar>
                            <a:columns>
                                <a:column name="tag_sequence" align="center" editorFunction="EditorFunction" width="40"/>
                                <a:column name="tag_code" align="center" editorFunction="EditorFunction" width="70"/>
                                <a:column name="tag_type_desc" align="center" editorFunction="EditorFunction" width="70"/>
                                <a:column name="template_flag" align="center" width="40"/>
                                <a:column name="hidden" align="center" editor="editor_ck" width="40"/>
                                <a:column name="printable" editor="editor_ck" width="40"/>
                                <a:column name="field_name" align="center" editorFunction="EditorFunction" width="70"/>
                                <a:column name="tag_desc" align="center" editor="editor_tf" width="70"/>
                                <a:column name="readonly" align="center" editorFunction="EditorFunction" width="40"/>
                                <a:column name="required" align="center" editorFunction="EditorFunction" width="40"/>
                                <a:column name="defaultvalue" align="center" editorFunction="EditorFunction" width="80"/>
                                <a:column name="width" align="center" editor="editor_nm" width="60"/>
                                <a:column name="form_display" prompt="BPM_TPLT_LAYOUT_BASIC.FORM_DISP" width="80">
                                    <a:column name="height" align="center" editorFunction="EditorFunction" width="60"/>
                                    <a:column name="colspan" align="center" editorFunction="EditorFunction" width="60"/>
                                    <a:column name="rowspan" align="center" editorFunction="EditorFunction" width="60"/>
                                </a:column>
                                <a:column name="grid_display" prompt="BPM_TPLT_LAYOUT_BASIC.GRID_DISP" width="80">
                                    <a:column name="align_desc" align="center" editorFunction="EditorFunction" width="70"/>
                                    <a:column name="footerrenderer" align="center" editorFunction="EditorFunction" width="70"/>
                                    <a:column name="lock" align="center" editorFunction="EditorFunction" width="40"/>
                                    <a:column name="sortable" align="center" editorFunction="EditorFunction" width="40"/>
                                    <a:column name="parent_tag_desc" align="center" editorFunction="EditorFunction" width="70"/>
                                </a:column>
                                <a:column name="data_relation_guide" align="center" prompt="BPM_PAGE_TAGS_BASIC.DATA_GUIDE" renderer="dataGuideRenderer" width="80"/>
                            </a:columns>
                            <a:editors>
                                <a:numberField id="editor_nm" allowDecimals="false" allowNegative="false"/>
                                <a:textField id="editor_tf"/>
                                <a:textArea id="editor_ta"/>
                                <a:comboBox id="editor_cb"/>
                                <a:checkBox id="editor_ck"/>
                                <a:lov id="editor_lov"/>
                            </a:editors>
                        </a:grid>
                    </a:tab>
                    <a:tab id="bpm_page_tags_textfield" prompt="BPM_PAGE_TAGS_BASIC.BPM_PAGE_TAGS_TEXTFIELD" width="100">
                        <a:grid bindTarget="bpm_page_tags_basic_result_ds" height="200" marginHeight="250" marginWidth="30" navBar="true" width="1270">
                            <a:toolBar>
                                <a:button type="add"/>
                                <a:button type="delete"/>
                            </a:toolBar>
                            <a:columns>
                                <a:column name="tag_sequence" align="center" editorFunction="tfEditorFunction" width="50"/>
                                <a:column name="tag_code" align="center" editorFunction="tfEditorFunction" width="150"/>
                                <a:column name="tag_type_desc" align="center" editorFunction="tfEditorFunction" width="80"/>
                                <a:column name="template_flag" align="center" width="40"/>
                                <a:column name="hidden" align="center" editor="tf_editor_ck" width="40"/>
                                <a:column name="specialattribute" align="center" prompt="特殊属性">
                                    <a:column name="tf_typecase_desc" align="center" editorFunction="tfEditorFunction" width="80"/>
                                </a:column>
                            </a:columns>
                            <a:editors>
                                <a:numberField id="tf_editor_nm" allowDecimals="false" allowNegative="false"/>
                                <a:textField id="tf_editor_tf"/>
                                <a:comboBox id="tf_editor_cb"/>
                                <a:checkBox id="tf_editor_ck"/>
                            </a:editors>
                        </a:grid>
                    </a:tab>
                    <a:tab id="bpm_page_tags_numberfield" prompt="BPM_PAGE_TAGS_BASIC.BPM_PAGE_TAGS_NUMBERFIELD" width="100">
                        <a:grid bindTarget="bpm_page_tags_basic_result_ds" height="200" marginHeight="250" marginWidth="30" navBar="true" width="1270">
                            <a:toolBar>
                                <a:button type="add"/>
                                <a:button type="delete"/>
                            </a:toolBar>
                            <a:columns>
                                <a:column name="tag_sequence" align="center" editorFunction="nmEditorFunction" width="50"/>
                                <a:column name="tag_code" align="center" editorFunction="nmEditorFunction" width="150"/>
                                <a:column name="tag_type_desc" align="center" editorFunction="nmEditorFunction" width="80"/>
                                <a:column name="template_flag" align="center" width="40"/>
                                <a:column name="hidden" align="center" editor="nf_editor_ck" width="40"/>
                                <a:column name="specialattribute" align="center" prompt="特殊属性">
                                    <a:column name="nf_allowdecimals" align="center" editorFunction="nmEditorFunction" width="80"/>
                                    <a:column name="nf_decimalprecision" align="center" editorFunction="nmEditorFunction" width="80"/>
                                    <a:column name="nf_allowformat" align="center" editorFunction="nmEditorFunction" width="80"/>
                                    <a:column name="nf_allownegative" align="center" editorFunction="nmEditorFunction" width="80"/>
                                </a:column>
                            </a:columns>
                            <a:editors>
                                <a:numberField id="nf_editor_nm" allowDecimals="false" allowNegative="false"/>
                                <a:textField id="nf_editor_tf"/>
                                <a:comboBox id="nf_editor_cb"/>
                                <a:checkBox id="nf_editor_ck"/>
                            </a:editors>
                        </a:grid>
                    </a:tab>
                    <a:tab id="bpm_page_tags_combobox" prompt="BPM_PAGE_TAGS_BASIC.BPM_PAGE_TAGS_COMBOBOX" width="100">
                        <a:grid bindTarget="bpm_page_tags_basic_result_ds" height="200" marginHeight="250" marginWidth="30" navBar="true" width="1270">
                            <a:toolBar>
                                <a:button type="add"/>
                                <a:button type="delete"/>
                            </a:toolBar>
                            <a:columns>
                                <a:column name="tag_sequence" align="center" editorFunction="cbEditorFunction" width="50"/>
                                <a:column name="tag_code" align="center" editorFunction="cbEditorFunction" width="150"/>
                                <a:column name="tag_type_desc" align="center" editorFunction="cbEditorFunction" width="80"/>
                                <a:column name="template_flag" align="center" width="40"/>
                                <a:column name="hidden" align="center" editor="cb_editor_ck" width="40"/>
                                <a:column name="specialattribute" align="center" prompt="特殊属性">
                                    <a:column name="cb_datasource_desc" align="center" editorFunction="cbEditorFunction" width="80"/>
                                    <a:column name="cb_syscode" align="center" editorFunction="cbEditorFunction" width="80"/>
                                    <a:column name="cb_sqltext" align="center" editorFunction="cbEditorFunction" width="80"/>
                                    <a:column name="cb_parse_sql" align="center" prompt="BPM_PAGE_TAGS_BASIC.SQLTEXT_PARSE" renderer="cbParseSqlFunction" width="80"/>
                                    <a:column name="cb_displayfield" align="center" editorFunction="cbEditorFunction" width="80"/>
                                    <a:column name="cb_valuefield" align="center" editorFunction="cbEditorFunction" width="80"/>
                                    <a:column name="cb_returnfield_desc" align="center" width="80"/>
                                    <a:column name="cb_returnfield" align="center" editor="cb_editor_tf" width="80"/>
                                    <a:column name="cb_options_link" align="center" prompt="BPM_PAGE_TAGS_COMBOBOX.OPTIONS" renderer="OptionsFunction" width="80"/>
                                    <a:column name="cb_data_writeback" align="center" prompt="BPM_PAGE_TAGS_COMBOBOX.MAPPER" renderer="WritebackFunction" width="80"/>
                                </a:column>
                            </a:columns>
                            <a:editors>
                                <a:numberField id="cb_editor_nm" allowDecimals="false" allowNegative="false"/>
                                <a:textField id="cb_editor_tf"/>
                                <a:comboBox id="cb_editor_cb"/>
                                <a:checkBox id="cb_editor_ck"/>
                                <a:lov id="cb_editor_lov"/>
                            </a:editors>
                        </a:grid>
                    </a:tab>
                    <a:tab id="bpm_page_tags_lov" prompt="BPM_PAGE_TAGS_BASIC.BPM_PAGE_TAGS_LOV" width="100">
                        <a:grid bindTarget="bpm_page_tags_basic_result_ds" height="200" marginHeight="250" marginWidth="30" navBar="true" width="1270">
                            <a:toolBar>
                                <a:button type="add"/>
                                <a:button type="delete"/>
                            </a:toolBar>
                            <a:columns>
                                <a:column name="tag_sequence" align="center" editorFunction="lovEditorFunction" width="50"/>
                                <a:column name="tag_code" align="center" editorFunction="lovEditorFunction" width="150"/>
                                <a:column name="tag_type_desc" align="center" editorFunction="lovEditorFunction" width="80"/>
                                <a:column name="template_flag" align="center" width="40"/>
                                <a:column name="hidden" align="center" editor="lov_editor_ck" width="40"/>
                                <a:column name="specialattribute" align="center" prompt="特殊属性">
                                    <a:column name="lov_datasource_desc" align="center" editorFunction="lovEditorFunction" width="80"/>
                                    <a:column name="lov_lovservice" align="center" editorFunction="lovEditorFunction" width="80"/>
                                    <a:column name="lov_lovurl" align="center" editorFunction="lovEditorFunction" width="80"/>
                                    <a:column name="lov_sqltext" align="center" editorFunction="lovEditorFunction" width="80"/>
                                    <a:column name="lov_parse_sql" align="center" prompt="BPM_PAGE_TAGS_BASIC.SQLTEXT_PARSE" renderer="lovParseSqlFunction" width="80"/>
                                    <a:column name="lov_data_writeback" align="center" prompt="BPM_PAGE_TAGS_LOV.MAPPER" renderer="LovWritebackFunction" width="60"/>
                                    <a:column name="lov_lovautoquery" align="center" editorFunction="lovEditorFunction" width="80"/>
                                    <a:column name="lov_lovgridheight" align="center" editorFunction="lovEditorFunction" width="80"/>
                                    <a:column name="lov_lovheight" align="center" editorFunction="lovEditorFunction" width="80"/>
                                    <a:column name="lov_lovwidth" align="center" editorFunction="lovEditorFunction" width="80"/>
                                    <a:column name="lov_lovlabelwidth" align="center" editorFunction="lovEditorFunction" width="80"/>
                                    <a:column name="lov_title" align="center" editorFunction="lovEditorFunction" width="80"/>
                                </a:column>
                            </a:columns>
                            <a:editors>
                                <a:numberField id="lov_editor_nm" allowDecimals="false" allowNegative="false"/>
                                <a:textField id="lov_editor_tf"/>
                                <a:comboBox id="lov_editor_cb"/>
                                <a:checkBox id="lov_editor_ck"/>
                                <a:lov id="lov_editor_lov"/>
                            </a:editors>
                        </a:grid>
                    </a:tab>
                    <a:tab id="bpm_page_tags_label" prompt="BPM_PAGE_TAGS_BASIC.BPM_PAGE_TAGS_LABEL" width="100">
                        <a:grid bindTarget="bpm_page_tags_basic_result_ds" height="200" marginHeight="250" marginWidth="30" navBar="true" width="1270">
                            <a:toolBar>
                                <a:button type="add"/>
                                <a:button type="delete"/>
                            </a:toolBar>
                            <a:columns>
                                <a:column name="tag_sequence" align="center" editorFunction="lEditorFunction" width="50"/>
                                <a:column name="tag_code" align="center" editorFunction="lEditorFunction" width="150"/>
                                <a:column name="tag_type_desc" align="center" editorFunction="lEditorFunction" width="80"/>
                                <a:column name="template_flag" align="center" width="40"/>
                                <a:column name="hidden" align="center" editorFunction="lEditorFunction" width="40"/>
                                <a:column name="specialattribute" align="center" prompt="特殊属性">
                                    <a:column name="l_renderer" align="center" editorFunction="lEditorFunction" width="80"/>
                                </a:column>
                            </a:columns>
                            <a:editors>
                                <a:numberField id="l_editor_nm" allowDecimals="false" allowNegative="false"/>
                                <a:textField id="l_editor_tf"/>
                                <a:comboBox id="l_editor_cb"/>
                                <a:checkBox id="l_editor_ck"/>
                            </a:editors>
                        </a:grid>
                    </a:tab>
                    <a:tab id="bpm_page_tags_radio" prompt="BPM_PAGE_TAGS_BASIC.BPM_PAGE_TAGS_RADIO" width="100">
                        <a:grid bindTarget="bpm_page_tags_basic_result_ds" height="200" marginHeight="250" marginWidth="30" navBar="true" width="1270">
                            <a:toolBar>
                                <a:button type="add"/>
                                <a:button type="delete"/>
                            </a:toolBar>
                            <a:columns>
                                <a:column name="tag_sequence" align="center" editorFunction="rEditorFunction" width="50"/>
                                <a:column name="tag_code" align="center" editorFunction="rEditorFunction" width="150"/>
                                <a:column name="tag_type_desc" align="center" editorFunction="rEditorFunction" width="80"/>
                                <a:column name="template_flag" align="center" width="40"/>
                                <a:column name="hidden" align="center" editor="r_editor_ck" width="40"/>
                                <a:column name="specialattribute" align="center" prompt="特殊属性">
                                    <a:column name="r_labelexpression" align="center" editorFunction="rEditorFunction" width="80"/>
                                    <a:column name="r_layout_desc" align="center" editorFunction="rEditorFunction" width="80"/>
                                    <a:column name="r_datasource_desc" align="center" editorFunction="rEditorFunction" width="80"/>
                                    <a:column name="r_syscode" align="center" editorFunction="rEditorFunction" width="80"/>
                                    <a:column name="r_options_link" align="center" prompt="BPM_PAGE_TAGS_COMBOBOX.OPTIONS" renderer="RadioOptionsFunction" width="80"/>
                                </a:column>
                            </a:columns>
                            <a:editors>
                                <a:numberField id="r_editor_nm" allowDecimals="false" allowNegative="false"/>
                                <a:textField id="r_editor_tf"/>
                                <a:comboBox id="r_editor_cb"/>
                                <a:checkBox id="r_editor_ck"/>
                                <a:lov id="r_editor_lov"/>
                            </a:editors>
                        </a:grid>
                    </a:tab>
                    <a:tab id="bpm_page_tags_checkbox" prompt="BPM_PAGE_TAGS_BASIC.BPM_PAGE_TAGS_CHECKBOX" width="100">
                        <a:grid bindTarget="bpm_page_tags_basic_result_ds" height="200" marginHeight="250" marginWidth="30" navBar="true" width="1270">
                            <a:toolBar>
                                <a:button type="add"/>
                                <a:button type="delete"/>
                            </a:toolBar>
                            <a:columns>
                                <a:column name="tag_sequence" align="center" editorFunction="ckEditorFunction" width="50"/>
                                <a:column name="tag_code" align="center" editorFunction="ckEditorFunction" width="150"/>
                                <a:column name="tag_type_desc" align="center" editorFunction="ckEditorFunction" width="80"/>
                                <a:column name="template_flag" align="center" width="40"/>
                                <a:column name="hidden" align="center" editor="ck_editor_ck" width="40"/>
                                <a:column name="specialattribute" align="center" prompt="特殊属性">
                                    <a:column name="ck_checkedvalue" align="center" editorFunction="ckEditorFunction" width="80"/>
                                    <a:column name="ck_uncheckedvalue" align="center" editorFunction="ckEditorFunction" width="80"/>
                                    <a:column name="ck_label" align="center" editorFunction="ckEditorFunction" width="80"/>
                                </a:column>
                            </a:columns>
                            <a:editors>
                                <a:numberField id="ck_editor_nm" allowDecimals="false" allowNegative="false"/>
                                <a:textField id="ck_editor_tf"/>
                                <a:comboBox id="ck_editor_cb"/>
                                <a:checkBox id="ck_editor_ck"/>
                            </a:editors>
                        </a:grid>
                    </a:tab>
                    <a:tab id="bpm_page_tags_datepicker" prompt="BPM_PAGE_TAGS_BASIC.BPM_PAGE_TAGS_DATEPICKER" width="100">
                        <a:grid bindTarget="bpm_page_tags_basic_result_ds" height="200" marginHeight="250" marginWidth="30" navBar="true" width="1270">
                            <a:toolBar>
                                <a:button type="add"/>
                                <a:button type="delete"/>
                            </a:toolBar>
                            <a:columns>
                                <a:column name="tag_sequence" align="center" editorFunction="dkEditorFunction" width="50"/>
                                <a:column name="tag_code" align="center" editorFunction="dkEditorFunction" width="150"/>
                                <a:column name="tag_type_desc" align="center" editorFunction="dkEditorFunction" width="80"/>
                                <a:column name="template_flag" align="center" width="40"/>
                                <a:column name="hidden" align="center" editor="dk_editor_ck" width="40"/>
                                <a:column name="specialattribute" align="center" prompt="特殊属性">
                                    <a:column name="dk_viewsize" align="center" editorFunction="dkEditorFunction" width="80"/>
                                    <a:column name="dk_enablebesidedays" align="center" editorFunction="dkEditorFunction" width="80"/>
                                    <a:column name="dk_enablemonthbtn" align="center" editorFunction="dkEditorFunction" width="80"/>
                                </a:column>
                            </a:columns>
                            <a:editors>
                                <a:numberField id="dk_editor_nm" allowDecimals="false" allowNegative="false"/>
                                <a:textField id="dk_editor_tf"/>
                                <a:comboBox id="dk_editor_cb"/>
                                <a:checkBox id="dk_editor_ck"/>
                            </a:editors>
                        </a:grid>
                    </a:tab>
                    <a:tab id="bpm_page_tags_datetimepicker" prompt="BPM_PAGE_TAGS_BASIC.BPM_PAGE_TAGS_DATETIMEPICKER" width="100">
                        <a:grid bindTarget="bpm_page_tags_basic_result_ds" height="200" marginHeight="250" marginWidth="30" navBar="true" width="1270">
                            <a:toolBar>
                                <a:button type="add"/>
                                <a:button type="delete"/>
                            </a:toolBar>
                            <a:columns>
                                <a:column name="tag_sequence" align="center" editorFunction="dtkEditorFunction" width="50"/>
                                <a:column name="tag_code" align="center" editorFunction="dtkEditorFunction" width="150"/>
                                <a:column name="tag_type_desc" align="center" editorFunction="dtkEditorFunction" width="80"/>
                                <a:column name="template_flag" align="center" width="40"/>
                                <a:column name="hidden" align="center" editor="dtk_editor_ck" width="40"/>
                                <a:column name="specialattribute" align="center" prompt="特殊属性">
                                    <a:column name="dtk_viewsize" align="center" editorFunction="dtkEditorFunction" width="80"/>
                                    <a:column name="dtk_enablebesidedays" align="center" editorFunction="dtkEditorFunction" width="80"/>
                                    <a:column name="dtk_enablemonthbtn" align="center" editorFunction="dtkEditorFunction" width="80"/>
                                    <a:column name="dtk_hour" align="center" editorFunction="dtkEditorFunction" width="80"/>
                                    <a:column name="dtk_minute" align="center" editorFunction="dtkEditorFunction" width="80"/>
                                    <a:column name="dtk_second" align="center" editorFunction="dtkEditorFunction" width="80"/>
                                </a:column>
                            </a:columns>
                            <a:editors>
                                <a:numberField id="dtk_editor_nm" allowDecimals="false" allowNegative="false"/>
                                <a:textField id="dtk_editor_tf"/>
                                <a:comboBox id="dtk_editor_cb"/>
                                <a:checkBox id="dtk_editor_ck"/>
                            </a:editors>
                        </a:grid>
                    </a:tab>
                </a:tabs>
            </a:tabPanel>
        </a:screenBody>
    </a:view>
</a:screen>
