<?xml version="1.0" encoding="UTF-8"?>
<!--
    $Author: Emerson Zhang
    $Date: 
    $Revision: 1.0  
    $Purpose: 用于查询待办事项列表
-->
<a:service xmlns:s="aurora.plugin.script" xmlns:a="http://www.aurora-framework.org/application" xmlns:t="uncertain.composite.transform" xmlns:p="uncertain.proc" trace="true">
    <a:init-procedure>
        <!--查hr中待办-->
        <!--TODO 暂时fetchAll="false"-->
        <!--
        <a:model-query autoCount="false" fetchAll="false" model="mobile.systems.hr.todo.mbs_wfl_hr_todo_vl" rootPath="/model/"/>
        -->
        <!--查中煤待办-->
        <!-- <a:model-query autoCount="false" fetchAll="false" model="mobile.systems.cc_ebs.todo.mbs_wfl_cc_ebs_todo_vl" rootPath="/model/"/> -->
        <s:server-script import="json.js"><![CDATA[
            var parameter = $ctx.parameter;
            //println(parameter.localIds);
            //var localIds = parameter.localIds; 
            var localIds = eval(decodeURIComponent(parameter.localIds));
            //println(localIds);
            var success = $ctx.success;
            var mapped_userid = $session.user_id;
            
            parameter.mapped_userid = mapped_userid;
            
            var bm = new ModelService('mobile.clients.commons.todo.mbs_todo_list_query');
            var res = bm.queryAsMap();
            var arr = res.getChildren();
            
            var result = {
                head: {
                    message: " ",
                    code: success ? 'ok' : 'failure'
                },
                body: {
                    delete: [],
                    new: []
                }
            
            };
            
            var deletes = result.body.delete;
            var news = result.body.new;
            
            for (j = 0;j < arr.length;j++) {
                if (!contains(arr[j].LOCAL_ID, localIds,'M')) {
                    //new
                    news.push({
                        localId: arr[j].LOCAL_ID,
                        sourceSystemName: arr[j].SYS_NAME,
                        screenName: arr[j].SCREEN_NAME,
                        item1: arr[j].ITEM1,
                        item2: arr[j].ITEM2,
                        item3: arr[j].ITEM3,
                        item4: arr[j].ITEM4
                    });
                }
            }
            
            for (var i in localIds) {
                //println(i + "=" + localIds[i].localId)
                if (!contains(localIds[i].localId, arr,'S')) {
                    //del
                    deletes.push({
                        localId: localIds[i].localId,
                        sourceSystemName: localIds[i].sourceSystemName,
                    });
                }
            }
            
            function contains(localId, array,source) {
                for (var i in array) {
                    if(source == 'M'){
                     	//println(localId +" "+source+" "+array[i].localId);
                    	if (localId == array[i].localId) return true;
                    }else if(source == 'S'){
                     	//println(localId +" "+source+" "+array[i].LOCAL_ID);
                    	if (localId == array[i].LOCAL_ID) return true;
                    }
                }
                return false;
            }
            //println(json2str(result));
            write(result);
        ]]></s:server-script>
    </a:init-procedure>
</a:service>
