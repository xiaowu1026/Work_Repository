<?xml version="1.0" encoding="UTF-8"?>
<!--
    $Author: lenovo  
    $Date: 2017-4-28 下午4:16:54  
    $Revision: 1.0  
    $Purpose: 
-->
<bm:model xmlns:o="aurora.database.local.oracle" xmlns:bm="http://www.aurora-framework.org/schema/bm" xmlns:f="aurora.database.features" alias="t1" baseTable="AM_ACCOUNT_INFO">
    <bm:operations>
        <bm:operation name="query">
            <bm:query-sql><![CDATA[
                SELECT v.*
			  FROM (SELECT aai.account_id,
			               (SELECT fd.description_text
			                  FROM fnd_companies fc, fnd_descriptions fd
			                 WHERE fc.company_short_name_id = fd.description_id
			                   AND fd.language = ${/session/@lang}
			                   AND fc.company_code = aai.open_organ) open_organ_name,
			               (
			                   select fc.company_id
			                   from fnd_companies fc
			                   where fc.company_code = aai.open_organ
			               ) company_id,
			               aai.open_organ,
			               aai.open_dept,
			               (SELECT frcv.description
			                  FROM fnd_region_code_vl frcv
			                 WHERE frcv.region_code LIKE '%00'
			                   AND frcv.region_code = aai.open_province) open_province_name,
			               aai.open_province,
			               (SELECT frcv.description
			                  FROM fnd_region_code_vl frcv
			                 WHERE frcv.region_code = aai.open_city) open_city_name,
			               aai.open_city,
			               aai.open_bank,
			               (SELECT fd.description_text
			                  FROM sys_code_values scv, fnd_descriptions fd
			                 WHERE scv.code_id =
			                       (SELECT sc.code_id
			                          FROM sys_codes sc
			                         WHERE sc.code = 'OPEN_BANK')
			                   AND scv.code_value_name_id = fd.description_id
			                   AND scv.code_value = aai.open_bank
			                   AND fd.language = ${/session/@lang}) open_bank_name,
			               (SELECT f.description_text
			                  FROM gld_currency gc, fnd_descriptions f
			                 WHERE gc.currency_name_id = f.description_id
			                   AND gc.currency_code = aai.currency
			                   AND gc.enabled_flag = 'Y'
			                   AND f.language = ${/session/@lang}) currency_name,
			               aai.currency ,
			             
			               aai.account_name,
			               aai.bank_account,
			               aai.branch_bank,
			               (SELECT bbn.bank_name
			                  FROM bcdl_bank_num bbn
			                 WHERE bbn.bank_num = aai.branch_bank) branch_bank_name,
			             
			               aai.segment1,
			               (SELECT fc.company_short_name
			                  FROM fnd_companies_vl fc
			                 WHERE fc.company_code = aai.segment1) segment1_desc,
			               aai.segment2,
			               (SELECT frc.responsibility_center_name FROM fnd_responsibility_centers_vl frc
				                 WHERE frc.responsibility_center_code = aai.segment2
				                   AND frc.company_id =
				                       (SELECT fc.company_id
				                          FROM fnd_companies fc
				                         WHERE fc.company_code = aai.segment1)) segment2_desc,
			               aai.segment3,
			               (SELECT fd.description_text
			                  FROM gld_accounts ga, fnd_descriptions fd
			                 WHERE ga.account_code = aai.segment3
			                   AND ga.description_id = fd.description_id
			                   AND fd.language = ${/session/@lang}) segment3_desc,
			               aai.segment4,
			               (SELECT fd.description_text
			                  FROM fnd_dimension_values t, fnd_descriptions fd
			                 WHERE t.dimension_id =
			                       (SELECT t.dimension_id
			                          FROM fnd_dimensions t
			                         WHERE t.dimension_code = 'DETAIL')
			                   AND t.dimension_value_code = aai.segment4
			                   AND t.description_id = fd.description_id
			                   AND fd.language = ${/session/@lang}) segment4_desc,
			               aai.status,
			               aai.account_property,
			               TO_CHAR(aai.check_begin_date,'yyyy-mm-dd') check_begin_date,
			               aai.payment_method,
			               aai.in_out_attr,
			               (SELECT scvv.code_value_name
			                  FROM sys_code_values_v scvv
			                 WHERE scvv.code = 'WLZQ_ADJST_IN_OUT_FLAG'
			                   AND scvv.code_value = aai.in_out_attr) in_out_attr_cn,
			               aai.need_pay_flag
			          FROM am_account_info aai
			         ORDER BY aai.apply_number DESC) v
                 #WHERE_CLAUSE#
  
            ]]></bm:query-sql>
        </bm:operation>
        <bm:operation name="insert">
            <bm:update-sql><![CDATA[
               begin
               cp_account_info_pkg.insert_account_info(p_account_id   => ${@account_id},
                                p_company_id    => ${/session/@company_id},
                                p_bank_account  => ${@bank_account},
                                p_account_name  => ${@account_name},
                                p_open_bank     => ${@open_bank},
                                p_branch_bank   => ${@branch_bank},
                                p_open_province => ${@open_province},
                                p_open_city     => ${@open_city},
                                p_currency      => ${@currency},
                                p_segment2      => ${@segment2},
                                p_segment3      => ${@segment3},
                                p_segment4      => ${@segment4},
                                p_status        => ${@status},
                                p_user_id       => ${/session/@user_id},
                                p_account_property => ${@account_property},
                                p_check_begin_date => to_date(${@check_begin_date},'yyyy-mm-dd'),
                                p_payment_method => ${@payment_method},
                                p_in_out_attr => ${@in_out_attr},
                                p_need_pay_flag => ${@need_pay_flag});
               end;
            ]]></bm:update-sql>
            <bm:parameters>
                <bm:parameter name="account_id" dataType="java.lang.Long" input="true" inputPath="@account_id" output="true" outputPath="@account_id"/>
            </bm:parameters>
        </bm:operation>
        <bm:operation name="update">
            <bm:update-sql><![CDATA[
               begin
               	 cp_account_info_pkg.update_account_info(p_account_id    => ${@account_id},
                                p_company_id    => ${/session/@company_id},
                                p_bank_account  => ${@bank_account},
                                p_account_name  => ${@account_name},
                                p_open_bank     => ${@open_bank},
                                p_branch_bank   => ${@branch_bank},
                                p_open_province => ${@open_province},
                                p_open_city     => ${@open_city},
                                p_currency      => ${@currency},
                                p_segment2      => ${@segment2},
                                p_segment3      => ${@segment3},
                                p_segment4      => ${@segment4},
                                p_status        => ${@status},
                                p_user_id       => ${/session/@user_id},
                                p_account_property => ${@account_property},
                                p_check_begin_date => to_date(${@check_begin_date},'yyyy-mm-dd'),
                                p_payment_method => ${@payment_method},
                                p_in_out_attr => ${@in_out_attr},
                                p_need_pay_flag => ${@need_pay_flag});
               end;
            ]]></bm:update-sql>
        </bm:operation>
    </bm:operations>
    <bm:query-fields>
        <bm:query-field name="company_id" queryExpression="v.company_id = ${/session/@company_id}"/>
        <bm:query-field name="bank_account" queryExpression="v.bank_account like ${@bank_account}"/>
        <bm:query-field name="account_name" queryExpression="v.account_name like ${@account_name}"/>
        <bm:query-field name="open_bank" queryExpression="v.open_bank = ${@open_bank}"/>
    </bm:query-fields>
</bm:model>
