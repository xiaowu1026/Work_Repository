<?xml version="1.0" encoding="UTF-8"?>
<bm:model xmlns:bm="http://www.aurora-framework.org/schema/bm" defaultOrderBy="t.expense_report_type_code,t.enabled_flag">
    <bm:fields>
        <bm:field name="expense_report_type_id" databaseType="NUMBER" datatype="java.lang.Double" physicalName="EXPENSE_REPORT_TYPE_ID"/>
        <bm:field name="company_id" databaseType="NUMBER" datatype="java.lang.Double" physicalName="COMPANY_ID"/>
        <bm:field name="expense_report_type_code" databaseType="VARCHAR2" datatype="java.lang.String" physicalName="EXPENSE_REPORT_TYPE_CODE" prompt="EXP_EXP_REPORT_TYPE.EXPENSE_REPORT_TYPE_CODE"/>
        <bm:field name="currency_code" databaseType="VARCHAR2" datatype="java.lang.String" physicalName="CURRENCY_CODE"/>
        <bm:field name="coding_rule" databaseType="VARCHAR2" datatype="java.lang.String" physicalName="CODING_RULE"/>
        <bm:field name="enabled_flag" databaseType="VARCHAR2" datatype="java.lang.String" physicalName="ENABLED_FLAG" prompt="EXP_EXPENSE_REPORT_TYPES.ENABLED_FLAG"/>
        <bm:field name="line_number_beginning" databaseType="NUMBER" datatype="java.lang.Double" physicalName="LINE_NUMBER_BEGINNING"/>
        <bm:field name="step_length" databaseType="NUMBER" datatype="java.lang.Double" physicalName="STEP_LENGTH"/>
        <bm:field name="auto_approve_flag" databaseType="VARCHAR2" datatype="java.lang.String" physicalName="AUTO_APPROVE_FLAG" prompt="EXP_EXPENSE_REPORT_TYPES.AUTO_APPROVE_FLAG"/>
        <bm:field name="auto_audit_flag" databaseType="VARCHAR2" datatype="java.lang.String" physicalName="AUTO_AUDIT_FLAG" prompt="EXP_EXPENSE_REPORT_TYPES.AUTO_AUDIT_FLAG"/>
        <bm:field name="payment_object" databaseType="VARCHAR2" datatype="java.lang.String" physicalName="PAYMENT_OBJECT"/>
        <bm:field name="req_required_flag" databaseType="VARCHAR2" datatype="java.lang.String" physicalName="REQ_REQUIRED_FLAG" prompt="EXP_EXPENSE_REPORT_TYPES.REQ_REQUIRED_FLAG"/>
        <bm:field name="adjustment_flag" databaseType="VARCHAR2" datatype="java.lang.String" physicalName="ADJUSTMENT_FLAG" prompt="EXP_EXP_REPORT_TYPE.ADJUSTMENT_FLAG"/>
        <bm:field name="report_name" databaseType="VARCHAR2" datatype="java.lang.String" physicalName="REPORT_NAME" prompt="EXP_EXP_REPORT_TYPE.REPORT_NAME"/>
        <bm:field name="payment_flag" databaseType="VARCHAR2" datatype="java.lang.String" physicalName="PAYMENT_FLAG" prompt="EXP_EXPENSE_REPORT_TYPE.PAYMENT_FLAG"/>
        <bm:field name="amortization_flag" databaseType="VARCHAR2" datatype="java.lang.String" physicalName="AMORTIZATION_FLAG" prompt="EXP_EXP_REPORT_TYPE.AMORTIZATION_FLAG"/>
        <bm:field name="template_flag" databaseType="VARCHAR2" datatype="java.lang.String" physicalName="TEMPLATE_FLAG" prompt="EXP_EXPENSE_REPORT_TYPES.TEMPLATE_FLAG"/>
        <bm:field name="reserve_budget" databaseType="VARCHAR2" datatype="java.lang.String" physicalName="RESERVE_BUDGET" prompt="EXP_EXP_REPORT_TYPE.USED_BUDGET"/>
        <bm:field name="budget_control_enabled" databaseType="VARCHAR2" datatype="java.lang.String" physicalName="BUDGET_CONTROL_ENABLED" prompt="EXP_EXP_REPORT_TYPE.BUDGET_CONTROL_ENABLED"/>
        <bm:field name="description" databaseType="VARCHAR" datatype="java.lang.String" prompt="EXP_EXP_REPORT_TYPE.EXPENSE_REPORT_TYPE_DESCRIPTION"/>
        <bm:field name="code_value_name" databaseType="VARCHAR2" datatype="java.lang.String" physicalName="CODE_VALUE_NAME" prompt="EXP_EXP_REPORT_TYPE.PAYMENT_CODE"/>
        <bm:field name="code_value_id" databaseType="NUMBER" datatype="java.lang.Double" physicalName="CODE_VALUE_ID"/>
        <bm:field name="flag" databaseType="VARCHAR2" datatype="java.lang.String" physicalName="FLAG"/>
        <bm:field name="exp_rep_count" databaseType="NUMBER" datatype="java.lang.Long" physicalName="exp_req_count"/>
        <bm:field name="document_page_type_display" prompt="PROMPT.DOCUMENT_PAGE_TYPE"/>
        <bm:field name="document_page_type"/>
        <bm:field name="payment_method_desc"/>
        <bm:field name="payment_method"/>
        <bm:field name="ref_pay_flag"/>
        <bm:field name="ref_gather_flag"/>
        <bm:field name="company_flag"/>
        <bm:field name="unit_flag"/>
        <bm:field name="mobile_approve"/>
        <bm:field name="mobile_fill"/>
        <bm:field name="oa_sign_flag"/>
        <bm:field name="app_documents_icon"/>
    </bm:fields>
    <bm:query-fields>
        <bm:query-field field="expense_report_type_code" queryExpression="expense_report_type_code=nvl(${@expense_report_type_code},expense_report_type_code)"/>
        <bm:query-field field="description" queryExpression="description like ${@description}"/>
        <bm:query-field field="expense_report_type_id" queryOperator="="/>
        <bm:query-field name="exp_report_header_id" queryExpression="expense_report_type_id=decode(${/parameter/@exp_report_header_id},null,expense_report_type_id,(select exp_report_type_id from exp_report_headers h where h.exp_report_header_id=${/parameter/@exp_report_header_id}))"/>
    </bm:query-fields>
    <bm:operations>
        <bm:operation name="query">
            <bm:query-sql><![CDATA[
    			select t.expense_report_type_id,
				       t.company_id,
				       t.expense_report_type_code,
				       t.description,
				       t.currency_code,
				       t.coding_rule,
				       t.enabled_flag,
				       t.line_number_beginning,
				       t.step_length,
				       t.auto_approve_flag,
				       t.auto_audit_flag,
				       t.payment_object ,
				       a.code_value_name ,
				       t.req_required_flag,
				       t.adjustment_flag,
				       a.code_value_id ,
				       t.report_name,
				       t.payment_flag,
				       t.amortization_flag,
				       t.reserve_budget,
				       t.template_flag,
				       t.budget_control_enabled,
				       t.payment_method,
				       t.payment_method_desc,
				       t.mobile_approve,
                       t.mobile_fill,
                       t.app_documents_icon,
                       t.oa_sign_flag,
				        (select count(1) from exp_report_headers erh where erh.exp_report_type_id = t.expense_report_type_id) exp_rep_count,
				       decode((select *
				                from (SELECT u.expense_report_type_id
				                        FROM EXP_EXPENSE_REPORT_TYPES u
				                       WHERE EXISTS (SELECT 1
				                                FROM EXP_REPORT_HEADERS H
				                               WHERE H.EXP_REPORT_TYPE_ID =
				                                     u.EXPENSE_REPORT_TYPE_ID)) l
				               where l.expense_report_type_id = t.expense_report_type_id),
				              '',
				              'Y',
				              'N') flag,
				       t.document_page_type,
				       (select v.code_value_name from sys_code_values_vl v where v.code_id = (select c.code_id from sys_codes c where c.code = 'DOCUMENT_PAGE_TYPE')
						and v.code_value = t.document_page_type) as document_page_type_display,
					   t.company_flag,
                       t.unit_flag,
                       t.ref_pay_flag,
                       t.ref_gather_flag
				  from exp_expense_report_types_vl t,
				       (select v.code_value, v.code_value_name, v.code_value_id
				          from sys_codes_vl t, sys_code_values_vl v
				         where t.code_id = v.code_id
				           and t.code = 'PAYMENT_OBJECT') a
				  #WHERE_CLAUSE# 
				  #ORDER_BY_CLAUSE#
				   
    		]]></bm:query-sql>
        </bm:operation>
        <bm:operation name="insert">
            <bm:update-sql><![CDATA[
            	begin
            		exp_expense_report_types_pkg.insert_exp_expense_rep_types(p_company_id					=>${@company_id},
																		      p_expense_report_type_code    =>${@expense_report_type_code},
																		      p_description					=>${@description},
																		      p_document_page_type 			=>${@document_page_type},
																		      p_currency_code				=>${@currency_code},
																		      p_coding_rule					=>${@coding_rule},
																		      p_enabled_flag				=>${@enabled_flag},
																		      p_created_by					=>${/session/@user_id},
																		      p_auto_approve_flag			=>${@auto_approve_flag},
																	          p_auto_audit_flag				=>${@auto_audit_flag},
																		      p_payment_object				=>${@payment_object},
																		      p_req_required_flag			=>${@req_required_flag},
																		      p_adjustment_flag				=>${@adjustment_flag},
																		      p_report_name					=>${@report_name},
																		      p_payment_flag				=>${@payment_flag},
																		      p_amortization_flag 			=>nvl(${@amortization_flag},'N'),
																		      p_expense_report_type_id		=>${@expense_report_type_id},
																		      p_template_flag				=>${@template_flag},
			                                 							      p_reserve_budget				=>${@reserve_budget},
			                                 							      p_budget_control_enabled		=>${@budget_control_enabled},
			                                 							      p_payment_method				=>${@payment_method},
			                                 							      p_ref_pay_flag 				=>${@ref_pay_flag},
			                                 							      p_ref_gather_flag             =>${@ref_gather_flag},
			                                 							      p_company_flag                =>${@company_flag},
			                                 							      p_unit_flag                   =>${@unit_flag},
			                                 							      p_app_documents_icon          =>${@app_documents_icon},
			                                 							      p_mobile_approve              =>${@mobile_approve},
			                                 							      p_mobile_fill                 =>${@mobile_fill},
			                                 							      p_oa_sign_flag				=>${@oa_sign_flag});
            	end;
        	]]></bm:update-sql>
            <bm:parameters>
                <bm:parameter name="expense_report_type_id" dataType="java.lang.Long" output="true" outputPath="@expense_report_type_id"/>
            </bm:parameters>
        </bm:operation>
        <bm:operation name="update">
            <bm:update-sql><![CDATA[
            	begin
            		exp_expense_report_types_pkg.update_exp_expense_rep_types(p_expense_report_type_id 		=>${@expense_report_type_id},
									                                          p_description            		=>${@description},
									                                          p_document_page_type 			=>${@document_page_type},
									                                          p_coding_rule            		=>${@coding_rule},
									                                          p_enabled_flag           		=>${@enabled_flag},
									                                          p_last_updated_by        		=>${/session/@user_id},
									                                          p_auto_approve_flag      		=>${@auto_approve_flag},
									                                          p_payment_object         		=>${@payment_object},
									                                          p_auto_audit_flag        		=>${@auto_audit_flag},
									                                          p_req_required_flag      		=>${@req_required_flag},
																		      p_adjustment_flag				=>${@adjustment_flag},
									                                          p_currency_code          		=>${@currency_code},
									                                          p_report_name            		=>${@report_name},
									                                          p_payment_flag           		=>${@payment_flag},
									                                          p_amortization_flag      		=>${@amortization_flag},
																		      p_template_flag				=>${@template_flag},
									                                          p_reserve_budget         		=>${@reserve_budget},
									                                          p_budget_control_enabled 		=>${@budget_control_enabled},
			                                 							      p_payment_method				=>${@payment_method},
			                                 							      p_ref_pay_flag 				=>${@ref_pay_flag},
			                                 							      p_ref_gather_flag             =>${@ref_gather_flag},
			                                 							      p_company_flag                =>${@company_flag},
			                                 							      p_unit_flag                   =>${@unit_flag},
			                                 							      p_app_documents_icon          =>${@app_documents_icon},
			                                 							      p_mobile_approve              =>${@mobile_approve},
			                                 							      p_mobile_fill                 =>${@mobile_fill},
			                                 							      p_oa_sign_flag				=>${@oa_sign_flag});
            	end;
        	]]></bm:update-sql>
        </bm:operation>
    </bm:operations>
    <bm:data-filters>
        <bm:data-filter name="filter" enforceOperations="query" expression="t.payment_object = a.code_value(+) and t.company_id =${/session/@company_id}"/>
    </bm:data-filters>
</bm:model>
